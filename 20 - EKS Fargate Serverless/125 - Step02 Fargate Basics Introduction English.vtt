WEBVTT

00:00.330 --> 00:01.440
-: Welcome back.

00:01.440 --> 00:03.960
In this lecture, we are going to understand

00:03.960 --> 00:07.140
about Fargate profile basics, right?

00:07.140 --> 00:10.170
So, so far, we have learned about classic load balancers,

00:10.170 --> 00:12.870
network load balancers, application load balancers,

00:12.870 --> 00:15.660
and then certificate manager, route 53,

00:15.660 --> 00:18.120
elastic block store, and then RDS

00:18.120 --> 00:20.880
in combination with Kubernetes

00:20.880 --> 00:24.660
and with the elastic Kubernetes service on AWS.

00:24.660 --> 00:27.570
So now we are going to start with Fargate profiles.

00:27.570 --> 00:31.410
So it is going to be divided into multiple sections,

00:31.410 --> 00:33.630
so that we start with basics

00:33.630 --> 00:37.890
and then move on to advanced sections of Fargate profiles.

00:37.890 --> 00:42.890
So if we go here, in our 0901 Fargate profile basics.

00:44.130 --> 00:46.620
So as a step one, we are going to understand

00:46.620 --> 00:49.350
what we are going to learn as part of basics.

00:49.350 --> 00:50.760
So assumptions here are,

00:50.760 --> 00:55.200
we already have a EKS cluster, whose name is EKS demo one,

00:55.200 --> 00:58.590
and then we already have a managed node group

00:58.590 --> 01:01.590
running there with EC2 instances.

01:01.590 --> 01:06.540
So now, we are going to add additional Fargate profile here.

01:06.540 --> 01:09.150
So which means we are going to run the cluster

01:09.150 --> 01:10.590
with the mixer more.

01:10.590 --> 01:13.650
In the sense, like, we are going to have managed node groups

01:13.650 --> 01:17.100
and also we are going to have Fargate profiles.

01:17.100 --> 01:19.320
So we are going to create a Fargate profile

01:19.320 --> 01:22.309
using our tool CLI name,

01:22.309 --> 01:24.120
EKSCTL.

01:24.120 --> 01:27.360
So we are going to deploy simple workload

01:27.360 --> 01:30.240
with the NGINX app one as the application,

01:30.240 --> 01:33.600
and then it's SQL in node port service will get created.

01:33.600 --> 01:35.620
And for creating the

01:37.050 --> 01:37.883
load balancer,

01:37.883 --> 01:40.710
we are going to use ingress service.

01:40.710 --> 01:41.700
And in addition to that,

01:41.700 --> 01:43.830
we are also going to DNS these (indistinct) that

01:43.830 --> 01:47.490
using external DNS in route 53.

01:47.490 --> 01:50.370
So in addition to that, we are also going to learn

01:50.370 --> 01:54.810
about new annotation for ingress which is target type IP.

01:54.810 --> 01:58.260
Okay, so why we are going to learn about that is

01:58.260 --> 02:02.070
because Fargate doesn't have a dedicated worker nodes.

02:02.070 --> 02:04.800
So that dedicated EC2 type of worker node.

02:04.800 --> 02:05.940
So which we can leverage

02:05.940 --> 02:07.980
for node port services which we have used

02:07.980 --> 02:10.860
for application load balancers earlier, right?

02:10.860 --> 02:13.020
So for that purpose, we are going to directly

02:13.020 --> 02:15.720
use the port IP to be registered

02:15.720 --> 02:17.940
to the load balancer target types.

02:17.940 --> 02:20.670
So we'll see more in detail when we go inside,

02:20.670 --> 02:23.730
but, so let's go back to our presentation once

02:23.730 --> 02:26.460
and then if you see, we already discussed

02:26.460 --> 02:29.040
about mixer more in our introductory section.

02:29.040 --> 02:31.920
But I will see the picture one more time.

02:31.920 --> 02:34.620
So we have a EKS manager node group

02:34.620 --> 02:37.830
with two instances in a private subnet currently.

02:37.830 --> 02:40.980
Okay, so but the depiction here we are also showing

02:40.980 --> 02:44.490
with the public subnet because manager node groups

02:44.490 --> 02:48.120
which we can create on EC2 instances we can create

02:48.120 --> 02:51.030
in both public and then private subnets.

02:51.030 --> 02:53.550
But when coming to Fargate case,

02:53.550 --> 02:56.100
so we are going to specifically tell that,

02:56.100 --> 03:00.660
so we can only create Fargate profiles in private subnets.

03:00.660 --> 03:04.380
So Fargate profiles can be deployed to EKS clusters only.

03:04.380 --> 03:09.000
At least we have in our EKS cluster one private subnet.

03:09.000 --> 03:12.510
So these cannot be deployed to the public subnets.

03:12.510 --> 03:15.810
So that is very important point which we should be aware of.

03:15.810 --> 03:17.850
So we already said that in private subnet,

03:17.850 --> 03:21.480
we already have manager node groups running, right?

03:21.480 --> 03:23.460
So let's go ahead and then see that.

03:23.460 --> 03:28.460
So for that QCTL get nodes I funnel wide, okay?

03:28.740 --> 03:31.890
And if you see we should have two nodes running here

03:31.890 --> 03:35.850
and their internal IP is 110.1.14 and then 85.8.

03:35.850 --> 03:38.520
But you can see there are no external IPs for these nodes

03:38.520 --> 03:42.990
because, so those are deployed to this private subnets.

03:42.990 --> 03:44.970
So now we are going to create this respect to

03:44.970 --> 03:48.600
Fargate profile and then run the stuff here.

03:48.600 --> 03:49.590
Moving on.

03:49.590 --> 03:52.020
So let's see what we are going to do, right?

03:52.020 --> 03:55.140
So as part of EKS cluster, already NAD gateways,

03:55.140 --> 03:57.614
and then public subnets and then private subnets

03:57.614 --> 04:00.810
are created in respect to availability zones, right?

04:00.810 --> 04:04.620
So now we are going to create a Fargate profile FP Dell.

04:04.620 --> 04:08.190
With the name space also FP Dell, right?

04:08.190 --> 04:12.420
And then going to deploy application named app1NGINX.

04:12.420 --> 04:16.320
So we have deployed it and then it created a replica set.

04:16.320 --> 04:18.720
So once it starts creating the ports,

04:18.720 --> 04:20.460
so those ports will be scheduled

04:20.460 --> 04:23.910
by automatically creating the Fargate nodes.

04:23.910 --> 04:25.770
So Fargate nodes will get created

04:25.770 --> 04:27.600
and then these ports will be scheduled

04:27.600 --> 04:29.310
on those respective nodes.

04:29.310 --> 04:33.330
So we have given in our manifest replica as two,

04:33.330 --> 04:36.330
so it is going to create two Fargate nodes.

04:36.330 --> 04:40.680
So here, one thing we need to understand here is in Fargate,

04:40.680 --> 04:43.380
so the number of hosts is directly proportional

04:43.380 --> 04:45.000
to number of ports.

04:45.000 --> 04:47.310
So if you give 10 ports in your replicas,

04:47.310 --> 04:50.010
in your deployment, so obviously you're going to get

04:50.010 --> 04:52.800
created 10 Fargate nodes.

04:52.800 --> 04:57.270
So now moving on, we are going to also automatically

04:57.270 --> 05:00.540
have an outbound connection to the EKS cluster plane

05:00.540 --> 05:03.570
for these Fargate nodes via NAD gateways.

05:03.570 --> 05:06.720
The next thing is, it's equal and node port service also

05:06.720 --> 05:07.800
will get created.

05:07.800 --> 05:09.690
So when we are doing the complete mixer,

05:09.690 --> 05:11.370
more with multiple applications,

05:11.370 --> 05:13.540
few on worker nodes and then few on

05:15.570 --> 05:16.403
Fargate.

05:16.403 --> 05:18.420
Then these node port services will be very

05:18.420 --> 05:22.200
helpful where we are going to define target type colon IP

05:22.200 --> 05:24.510
as the annotation at the service level also

05:24.510 --> 05:26.310
as even required.

05:26.310 --> 05:29.580
So now we are going to create the ingress service,

05:29.580 --> 05:32.100
means like, whatever the manifest we created it is going to

05:32.100 --> 05:37.100
create ingress service with the SSL, SSL redirect,

05:37.200 --> 05:38.820
external DNS, everything.

05:38.820 --> 05:40.890
And then it'll also associate

05:40.890 --> 05:43.110
the SSL certificate creator here

05:43.110 --> 05:46.427
and enable the SSL redirect and also DNS is still the

05:46.427 --> 05:51.427
fpdell.kube on cloud.com for using external DNS.

05:52.350 --> 05:56.674
And then whenever user tries to access fpdell.kube

05:56.674 --> 06:00.630
on cloud.com/app/index.html, so it comes

06:00.630 --> 06:03.540
to application load balancer and for the slash star,

06:03.540 --> 06:06.300
it is directly going to the ports.

06:06.300 --> 06:08.460
So there is no node port service in between.

06:08.460 --> 06:11.370
So from application load balancer target types,

06:11.370 --> 06:14.640
it is going to directly go to the respective ports.

06:14.640 --> 06:18.840
Whenever we use the target type annotation with IP.

06:18.840 --> 06:20.940
By default, it is going to have target type

06:20.940 --> 06:21.960
is equal to instance,

06:21.960 --> 06:25.650
which we really don't need to define because it is default.

06:25.650 --> 06:29.580
So now let's go back to our GitHub repo.

06:29.580 --> 06:33.060
So and then move on with the prerequisite steps.

06:33.060 --> 06:36.960
So one thing we need to understand in prerequisite CREs.

06:36.960 --> 06:38.160
EKSCTL,

06:38.160 --> 06:38.993
CLA.

06:38.993 --> 06:40.800
So this is very important thing.

06:40.800 --> 06:43.440
So EKSCTL will have continuous releases

06:43.440 --> 06:45.787
with new feature editions every 15, 20 days.

06:45.787 --> 06:50.787
So it's a very high evolving space nowadays in AWS.

06:51.000 --> 06:54.630
Means like EKSCTL and also Fargate related stuff.

06:54.630 --> 06:57.030
So that is the case, even though means like,

06:57.030 --> 06:59.670
whenever you have started and then implemented this.

06:59.670 --> 07:02.655
So you might have installed some version here,

07:02.655 --> 07:06.240
In other words, zero one EKS create cluster using EKSCTL.

07:06.240 --> 07:09.300
And now whenever you are doing maybe 15 days over

07:09.300 --> 07:11.040
and then again, you are trying with different,

07:11.040 --> 07:12.450
different things in your course,

07:12.450 --> 07:15.510
go ahead and then update your EKSCTL.

07:15.510 --> 07:18.030
So every 17 to 20 days, they have upgrades

07:18.030 --> 07:20.280
to the EKSCTL with lot of new features

07:20.280 --> 07:21.600
coming into the place.

07:21.600 --> 07:24.630
So always it is recommended to use latest version.

07:24.630 --> 07:26.850
And then this is the releaser space where

07:26.850 --> 07:29.850
you can browse to see latest version.

07:29.850 --> 07:33.720
And EKS serial version will provide you the exact

07:33.720 --> 07:35.790
information about what is the current version.

07:35.790 --> 07:38.970
I've also updated the report to check your version

07:38.970 --> 07:41.010
and then accordingly you can crosscheck

07:41.010 --> 07:42.420
in the EKSCTL releases

07:42.420 --> 07:44.610
what is the latest version and then update it.

07:44.610 --> 07:46.260
So this is only a prerequisite

07:46.260 --> 07:48.240
and then cautionary step for you.

07:48.240 --> 07:51.870
Okay, and now moving on prerequisite check

07:51.870 --> 07:55.800
about ALB ingress controller and then external DNS, right?

07:55.800 --> 07:58.710
So now if you go back to our PowerPoint here,

07:58.710 --> 08:01.260
so whatever you deploy in this private subnet,

08:01.260 --> 08:02.940
whatever the workloads you deploy,

08:02.940 --> 08:04.380
how are you going to expose it

08:04.380 --> 08:07.230
to the internet to test your application, right?

08:07.230 --> 08:09.480
So because this Fargate nodes doesn't have

08:09.480 --> 08:12.000
any concept of node port service.

08:12.000 --> 08:14.730
So even though if you create the node port service,

08:14.730 --> 08:17.280
so that node port information is not there,

08:17.280 --> 08:20.760
because it doesn't have a static node which

08:20.760 --> 08:22.650
supports these node port things, right?

08:22.650 --> 08:25.530
So even if you define a cluster IP service,

08:25.530 --> 08:27.930
it will be restricted to your cluster,

08:27.930 --> 08:30.810
but you cannot access at the internet level.

08:30.810 --> 08:33.720
So that's the reason you need to have the user

08:33.720 --> 08:38.190
or whatever the related load balancer created here, okay?

08:38.190 --> 08:40.170
So I'm just saying here, user management

08:40.170 --> 08:43.020
load balancer only because anything is fine, right?

08:43.020 --> 08:45.150
Manifest things I'm not going to change too much

08:45.150 --> 08:47.640
because upcoming again, next lecture (indistinct),

08:47.640 --> 08:50.220
we are going to add the user management stuff, okay?

08:50.220 --> 08:53.340
So but some load balancer, we are going to get created here

08:53.340 --> 08:55.740
for our app one, right?

08:55.740 --> 08:57.870
So whatever we are getting created here,

08:57.870 --> 09:00.300
those needs of few prerequisite services, right?

09:00.300 --> 09:03.960
Example, if you want to create a application load balancer

09:03.960 --> 09:05.310
in via Kubernetes,

09:05.310 --> 09:08.580
you need to have the ALB ingress controller installed.

09:08.580 --> 09:09.413
In the same way,

09:09.413 --> 09:11.700
if you want to register your DNS to route 53,

09:11.700 --> 09:14.670
you need external DNS should be available.

09:14.670 --> 09:17.610
So we need to ensure that those are available

09:17.610 --> 09:19.410
for us on our current work node.

09:19.410 --> 09:21.750
As part of previous sections, we are anyway

09:21.750 --> 09:25.350
continuing the same cluster EKS demo one.

09:25.350 --> 09:27.510
Those should be available for us.

09:27.510 --> 09:30.930
So we have verified kubectl get nodes -o wide.

09:30.930 --> 09:33.220
So we are going to verify KubeCTL

09:34.710 --> 09:39.300
get ports -n kube system to see that our ALB

09:39.300 --> 09:42.060
ingress controller port is running, right?

09:42.060 --> 09:44.760
So our ALB ingress controller port is running, no issues.

09:44.760 --> 09:47.610
So we'll also verify get ports in default names

09:47.610 --> 09:50.580
space where our external DNS port is running.

09:50.580 --> 09:53.850
So if these two are there, then only our this respect to

09:53.850 --> 09:55.530
load balance or whatever we are going to

09:55.530 --> 09:57.720
create for this app we are deploying

09:57.720 --> 09:59.940
in Fargate is going to get created,

09:59.940 --> 10:03.210
and then DNS wasted in route 53 successfully.

10:03.210 --> 10:07.110
So we verify all of our prerequisite steps also.

10:07.110 --> 10:08.100
In our next lecture,

10:08.100 --> 10:10.440
we'll focus on creating Fargate profile

10:10.440 --> 10:13.350
and then deploying the stuff and then testing it.

10:13.350 --> 10:15.000
So I'll see you in the next lecture.

10:15.000 --> 10:16.200
Until then, bye-bye.

10:16.200 --> 10:17.033
Thank you.
