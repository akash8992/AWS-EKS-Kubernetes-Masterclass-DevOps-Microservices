WEBVTT

00:00.300 --> 00:01.260
-: Welcome back.

00:01.260 --> 00:05.610
In this step let's verify the load balancer controller logs.

00:05.610 --> 00:08.970
So we've listed the parts from the kube system name space

00:08.970 --> 00:11.400
and we will verify the pods.

00:11.400 --> 00:15.060
So let's come back here and clear this

00:15.060 --> 00:18.159
and say kubectl and hyphen in

00:18.159 --> 00:19.260
(typing)

00:19.260 --> 00:24.260
kubesystem namespace and get pods.

00:24.420 --> 00:27.390
And we should get, we have two pods running here related

00:27.390 --> 00:32.390
to load balancer controller and those will be listed here.

00:32.426 --> 00:35.070
AWS load balancer controller, two pods

00:35.070 --> 00:39.505
and we can copy this pod name and say

00:39.505 --> 00:43.320
(typing) kubectl-n kubesystem

00:43.320 --> 00:47.850
and logs-f and provide the pod name here.

00:47.850 --> 00:49.560
And we can see the logs

00:49.560 --> 00:54.560
of that respective pod and all seems to be shown as info.

00:54.780 --> 00:59.040
So which very clearly says that we don't have any issues

00:59.040 --> 01:03.690
but if we have any issues or any errors it has been showing

01:03.690 --> 01:06.330
so we can see in detail, right?

01:06.330 --> 01:07.620
So but currently it is only

01:07.620 --> 01:10.680
at info things which we really don't need to worry.

01:10.680 --> 01:13.440
And if we want to see for other pod also

01:13.440 --> 01:16.830
so the same command applies for us, which is

01:16.830 --> 01:20.400
provide the kubectl-n kubesystem logs-f

01:20.400 --> 01:23.100
and the pod name, the second pod name.

01:23.100 --> 01:26.880
And now till here everything is completed related

01:26.880 --> 01:29.460
to load balancer controller, right?

01:29.460 --> 01:31.890
But for additional verification

01:31.890 --> 01:34.200
and then for additional understanding,

01:34.200 --> 01:39.200
step 0-4-0-5 and 0-4-0-6 are defined.

01:39.750 --> 01:42.180
And these are completely optional

01:42.180 --> 01:45.120
and those who are highlighted with internals

01:45.120 --> 01:46.980
to understand more about it.

01:46.980 --> 01:49.980
So if you want to move on, skip this and then move on

01:49.980 --> 01:52.860
to next step, our next video you can move on

01:52.860 --> 01:57.360
or if you want to see about what is present internally,

01:57.360 --> 01:59.370
we can also see these things.

01:59.370 --> 02:02.010
So this is about AWS load balancer controller

02:02.010 --> 02:05.250
Kubernetes service account internals.

02:05.250 --> 02:07.110
So this is the service account.

02:07.110 --> 02:11.015
So we will list that out in a YAML format.

02:11.015 --> 02:14.010
(typing) So let me clear this and let's wait

02:14.010 --> 02:17.730
for the service account to be displayed in YAML format.

02:17.730 --> 02:19.110
So APA version is v-1,

02:19.110 --> 02:20.400
kind is service account,

02:20.400 --> 02:24.330
and annotation we know that our role here is outlined here.

02:24.330 --> 02:27.330
And this is managed by "eksctl"

02:27.330 --> 02:29.970
because we created this using "eksctl",

02:29.970 --> 02:32.040
IAM service account command,

02:32.040 --> 02:34.170
create IAM service account command.

02:34.170 --> 02:36.957
And now if you see here name is

02:36.957 --> 02:38.400
AWS load balancer controller,

02:38.400 --> 02:41.413
the service account name, and namespace.

02:41.413 --> 02:43.350
Additionally, it has something called "secret".

02:43.350 --> 02:48.150
So APA version, kind, metadata, and secrets, right?

02:48.150 --> 02:51.057
So inside the secrets you have something called

02:51.057 --> 02:53.820
AWS load balancer controller token.

02:53.820 --> 02:55.500
So this is the important thing

02:55.500 --> 02:57.690
which we need to be worried about.

02:57.690 --> 03:01.140
So get secret and get the value from there.

03:01.140 --> 03:03.097
And then -O YAML.

03:03.097 --> 03:08.010
(typing) So I'll say kubectl-n kubesystem, right?

03:08.010 --> 03:11.010
And I'll say, (typing) get secret.

03:11.010 --> 03:12.660
And this is the secret name.

03:12.660 --> 03:16.440
So we need to take it from here. Copy.

03:16.440 --> 03:19.680
And we will provide -O YAML.

03:19.680 --> 03:23.403
So that will get the secret name YAML format, right?

03:24.254 --> 03:28.620
(typing) So let's run that and you can see you have

03:28.620 --> 03:32.100
lot of information inside this secret.

03:32.100 --> 03:36.443
So secret and you have the CA cert, and also the token.

03:38.370 --> 03:40.710
So the token, what is this token?

03:40.710 --> 03:42.360
So that's the important thing here.

03:42.360 --> 03:43.500
So if you want,

03:43.500 --> 03:48.500
so you can use SSL checker cert decoder to decode the cert.

03:49.380 --> 03:52.980
First thing is we'll go to base64 decode, right?

03:52.980 --> 03:55.020
So we'll faster deal with ca.cert

03:55.020 --> 03:57.990
whatever is present inside this secret.

03:57.990 --> 04:01.200
So this is ca.cert and this is the value.

04:01.200 --> 04:05.640
So let me copy it and paste it here and then decode.

04:05.640 --> 04:08.280
So you got the certificate information here.

04:08.280 --> 04:10.470
And this certification information

04:10.470 --> 04:12.390
So we'll decode one more time using

04:12.390 --> 04:14.640
SSL checker cert decoder.

04:14.640 --> 04:16.500
So we'll go to that browser

04:16.500 --> 04:19.920
and take the base64 decoded value from here

04:19.920 --> 04:23.850
and go to this certificate decoder and decode it, right?

04:23.850 --> 04:27.510
And you'll find here, so this is issued on so and so date

04:27.510 --> 04:29.850
and expires on so and so date,

04:29.850 --> 04:32.310
and common name is Kubernetes,

04:32.310 --> 04:34.800
and common name is Kubernetes.

04:34.800 --> 04:38.760
So this is a standard CA cert present inside this.

04:38.760 --> 04:40.052
So this is CN is a called Kubernetes,

04:40.052 --> 04:43.140
so you can see the entire information here.

04:43.140 --> 04:45.840
So that is fine. So that is not the big thing here.

04:45.840 --> 04:49.920
So inside the secret you have something called "token".

04:49.920 --> 04:52.530
That is the important thing which we need to see.

04:52.530 --> 04:55.110
So first things first is we'll close these things

04:55.110 --> 04:58.830
and one more time we'll open the base64 decoder

04:58.830 --> 05:01.440
and also we'll open the jwt.io

05:01.440 --> 05:05.430
and put them aside and go back to our secret here, right?

05:05.430 --> 05:08.340
And inside secret in the token,

05:08.340 --> 05:10.500
whatever is there in the token field,

05:10.500 --> 05:12.930
you are going to copy that value.

05:12.930 --> 05:17.430
So whenever you have output at your secret in a YAML format

05:17.430 --> 05:19.770
you got all this information, right?

05:19.770 --> 05:23.190
So you're taking this copy of this token

05:23.190 --> 05:25.140
and you are going to do a base64 decode

05:26.490 --> 05:28.980
and take that information, right?

05:28.980 --> 05:33.840
And go here, and put it in that JWT encoded field

05:33.840 --> 05:37.230
and then you'll get that decoded and got that respect to

05:37.230 --> 05:38.640
JWT token.

05:38.640 --> 05:42.450
So you can see here Kubernetes service account,

05:42.450 --> 05:45.990
namespace and kubesystem, and secret name is so and so

05:45.990 --> 05:48.330
and all the information metadata about it,

05:48.330 --> 05:51.750
it is used by AWS load balancer controller.

05:51.750 --> 05:55.590
So why I am showing this JWT, right?

05:55.590 --> 06:00.360
So this load balancer controller, right?

06:00.360 --> 06:03.900
Is creating this AWS application load balancer

06:03.900 --> 06:08.580
whenever the Ingress manifest right here is deployed

06:08.580 --> 06:12.240
and when the k8s API server gets that information,

06:12.240 --> 06:14.820
this load balancer controller watches for Ingress events,

06:14.820 --> 06:16.770
takes that and then creates this

06:16.770 --> 06:18.420
AWS load balancer controller.

06:18.420 --> 06:21.810
So, but what is the authentication mechanism

06:21.810 --> 06:26.810
between this EKS cluster and AWS services?

06:27.060 --> 06:30.780
So if you want to call any AWS APA, right?

06:30.780 --> 06:34.830
Any AWS APA here, this load balancer controller is

06:34.830 --> 06:38.190
going to call the application load balancer APA's

06:38.190 --> 06:42.480
and then create that, respect to load balancer controller.

06:42.480 --> 06:44.820
To call that APA it needs to have

06:44.820 --> 06:47.010
the authentication mechanism, right?

06:47.010 --> 06:50.490
So that authentication mechanism, how it is defined

06:50.490 --> 06:55.320
in between these things is this respect to JWT token.

06:55.320 --> 06:58.560
So on a very high level, if you want to understand the APAs,

06:58.560 --> 07:00.780
the AWS service related APAs

07:00.780 --> 07:02.880
are like service APAs you can call,

07:02.880 --> 07:05.100
and the identity provider here

07:05.100 --> 07:07.140
is going to be your EKS cluster

07:07.140 --> 07:11.520
which is added as identity providers in your IAM, right?

07:11.520 --> 07:15.930
So as part of 0-1-0-2 section itself. So we have added that.

07:15.930 --> 07:20.370
So if you go here and let me go here, right?

07:20.370 --> 07:24.540
And go to the AWS EKS Kubernetes masterclass,

07:24.540 --> 07:29.490
and go to the section 01 and go to 01-02 here.

07:29.490 --> 07:32.880
And if you see the step here, create an associate IAM

07:32.880 --> 07:36.750
or IDC provider for our EKS cluster, right?

07:36.750 --> 07:39.570
So let's understand that in a high level.

07:39.570 --> 07:41.850
We are not going super deep here

07:41.850 --> 07:45.750
but let's try to understand in a high level that

07:45.750 --> 07:49.110
this respect to EKS cluster is added

07:49.110 --> 07:52.770
as a identity provider for the IAM service here.

07:52.770 --> 07:54.720
See? So whatever we have done,

07:54.720 --> 07:58.080
whatever we have run this command, right?

07:58.080 --> 08:01.140
EKS details associate, IAM OIDC provider.

08:01.140 --> 08:04.440
So at that point of time our EKS cluster is

08:04.440 --> 08:07.530
added here as a identity provider.

08:07.530 --> 08:11.820
So which means the identities present inside our EKS cluster

08:11.820 --> 08:15.630
will be able to access the AWS services

08:15.630 --> 08:18.510
based on the role assigned to the identity

08:18.510 --> 08:20.490
inside Kubernetes cluster.

08:20.490 --> 08:23.095
And inside Kubernetes cluster

08:23.095 --> 08:26.800
the identity is nothing but the AWS load balancer

08:27.960 --> 08:29.550
controller service account.

08:29.550 --> 08:32.367
So if you come back here, so the identity inside

08:32.367 --> 08:33.987
the EKS cluster is

08:33.987 --> 08:36.690
AWS load balancer controller service account,

08:36.690 --> 08:40.530
and this is annotated with the IAM role here

08:40.530 --> 08:44.760
which has the permissions defined in this IAM policy.

08:44.760 --> 08:46.590
Based on those IAM policies,

08:46.590 --> 08:48.960
this service whatever is created,

08:48.960 --> 08:51.270
this load balancer controller will use

08:51.270 --> 08:53.220
and whatever the token generated, right?

08:53.220 --> 08:56.020
Using the token it can authenticate against the

08:57.510 --> 09:01.080
services whatever is allowed as part of this IAM policy.

09:01.080 --> 09:03.450
And then create, update, and delete those

09:03.450 --> 09:05.190
application load balancers.

09:05.190 --> 09:09.270
So this much linking is present inside this internally.

09:09.270 --> 09:11.820
So we can go still deep and then see how this

09:11.820 --> 09:16.380
IAM OIDC provider related pictures and all those things.

09:16.380 --> 09:18.930
But for now it becomes super advanced

09:18.930 --> 09:21.270
and then we get confused with

09:21.270 --> 09:23.760
what we are going to learn about the Ingress.

09:23.760 --> 09:26.340
But I just want to ensure that in the internals

09:26.340 --> 09:29.760
of these things, so how this AWS load balancer

09:29.760 --> 09:33.060
controller deployment related pods is able to

09:33.060 --> 09:36.240
create this AWS application load balancer.

09:36.240 --> 09:38.700
Without any authentication, it's not possible, right?

09:38.700 --> 09:41.610
So it need to have some authentication mechanism.

09:41.610 --> 09:45.450
So that authentication mechanism is nothing but here

09:45.450 --> 09:47.550
whatever the token you are seeing.

09:47.550 --> 09:50.220
So using this token and it will be able to

09:50.220 --> 09:52.890
authenticate to those respect to APAs

09:52.890 --> 09:56.340
and then create the application load balancer for us.

09:56.340 --> 09:59.550
So now let's come back here and where are we?

09:59.550 --> 10:01.290
So this is the one, right?

10:01.290 --> 10:04.440
So we have seen these things and if you see in the

10:04.440 --> 10:06.720
deployment also we have seen the service account

10:06.720 --> 10:10.110
and in pods also we'll find the service account, right?

10:10.110 --> 10:12.840
So if you go there and you'll find something called

10:12.840 --> 10:16.050
in the volumes also you'll find the AWS IAM token.

10:16.050 --> 10:18.420
All these things you can see in detail

10:18.420 --> 10:20.070
if you run this command, right?

10:20.070 --> 10:23.310
So if you say kubectl get pods. (typing)

10:23.310 --> 10:24.600
Already for the deployment

10:24.600 --> 10:26.307
you have seen the service name,

10:26.307 --> 10:28.620
AWS load balancer controller.

10:28.620 --> 10:32.370
But for the load balancer controller pod spec,

10:32.370 --> 10:35.670
if you review you'll understand more and more here.

10:35.670 --> 10:38.470
So we can take these things and say kubesystem

10:39.855 --> 10:43.035
and this is the pod name we want, right?

10:43.035 --> 10:46.885
So copy and this is the pod name, right?

10:46.885 --> 10:48.957
So copy this pod name and

10:48.957 --> 10:51.540
(typing) -O YAML.

10:51.540 --> 10:54.870
And then you'll get the complete pod specification here

10:54.870 --> 10:58.170
and inside that spec.volumes.name.

10:58.170 --> 11:02.613
So if you go and then verify the volumes here, right?

11:03.810 --> 11:05.550
You'll find something called

11:05.550 --> 11:08.640
this respect to pod spec volumes.

11:08.640 --> 11:10.560
So you're going to find this one,

11:10.560 --> 11:15.150
service account token audiences sts.amazonaws.com

11:15.150 --> 11:18.443
and if the path is going to be token

11:18.443 --> 11:19.784
and it is going to be

11:19.784 --> 11:24.180
the name of that token is going to be AWS IAM token.

11:24.180 --> 11:25.860
So let's find those things.

11:25.860 --> 11:27.670
So we'll copy this to our

11:30.030 --> 11:34.650
something like our any of the file here and then search it.

11:34.650 --> 11:39.650
So let me copy and come back to the visual studio core here,

11:39.840 --> 11:42.110
remove these things, and...

11:43.299 --> 11:47.760
now remove the first line here, whatever we have added.

11:47.760 --> 11:50.856
And come down and remove the last line

11:50.856 --> 11:52.800
(indistinct) MacBook Pro

11:52.800 --> 11:57.800
and search for AWS-, IAM- token, right?

11:58.860 --> 12:00.750
And you'll find inside the pods

12:00.750 --> 12:05.750
inside the pod spec volumes AWS IAM token and

12:06.060 --> 12:11.060
which is using that token here and this pod is token.

12:11.460 --> 12:13.950
So now let's search for those things.

12:13.950 --> 12:16.530
So you can see in the volume mounts you'll find

12:16.530 --> 12:19.110
the mount pod, AWS IAM token.

12:19.110 --> 12:22.560
And in our easy two instances, in value and secrets,

12:22.560 --> 12:25.050
in so and so location, and service account,

12:25.050 --> 12:27.150
you'll find this IAM token.

12:27.150 --> 12:28.920
And in addition to that,

12:28.920 --> 12:31.380
we'll also find token here.

12:31.380 --> 12:34.590
Token and we need to find here

12:34.590 --> 12:39.060
AWS - this is the environment file web identity token file.

12:39.060 --> 12:40.350
And in service account

12:40.350 --> 12:43.320
this is the path token path here value, right?

12:43.320 --> 12:45.750
So this path we are picking here in detail.

12:45.750 --> 12:47.310
So let's come back here.

12:47.310 --> 12:50.250
So spec volume name, we have verified this

12:50.250 --> 12:53.670
and we'll go to volume mounts and we have verified this.

12:53.670 --> 12:56.400
And in web identity token also you'll find.

12:56.400 --> 12:59.520
So these, all these things, if we put them together

12:59.520 --> 13:03.150
you'll understand how the values are mounted

13:03.150 --> 13:06.060
to your pod inside load balancer controller

13:06.060 --> 13:07.890
so that the application present

13:07.890 --> 13:09.600
inside that load balancer controller,

13:09.600 --> 13:12.120
which is load balancer controller application,

13:12.120 --> 13:16.440
is able to authenticate (indistinct) AWS APAs.

13:16.440 --> 13:18.450
we can understand in detail.

13:18.450 --> 13:20.010
But these are only for our

13:20.010 --> 13:23.040
internals understanding how things are mounted and

13:23.040 --> 13:24.030
all those things.

13:24.030 --> 13:26.317
So in addition to that you have something called

13:26.317 --> 13:30.720
"verify TLS search for AWS load balancer controller".

13:30.720 --> 13:33.300
So these are the TLS search which we have seen earlier.

13:33.300 --> 13:36.360
So whatever this token, whatever you have seen is

13:36.360 --> 13:40.140
directly related to your load balancer controller, right?

13:40.140 --> 13:41.220
So which means like,

13:41.220 --> 13:44.820
for your load balancer controller related service account

13:44.820 --> 13:47.400
the secret mounted to it, that one we have seen

13:47.400 --> 13:50.433
as part of step 0-4-0-5, right?

13:52.500 --> 13:54.690
But when you go to step 0-4-0-6

13:54.690 --> 13:55.747
you'll find something called

13:55.747 --> 13:59.790
"verify TLS search for AWS load balancer controller"

13:59.790 --> 14:02.310
So this is the one we are discussing now,

14:02.310 --> 14:03.990
AWS load balancer TLS.

14:03.990 --> 14:05.460
So this is the secret.

14:05.460 --> 14:10.460
So we have the 9-4-4-3 pod, which is a SSL pod running here.

14:10.560 --> 14:12.870
So for that the certificates you are going to take

14:12.870 --> 14:16.500
from this AWS load balancer TLS secrets.

14:16.500 --> 14:20.940
So you can go here and then get the output of this

14:20.940 --> 14:24.000
kubectl- and kubesystem, get that secret,

14:24.000 --> 14:26.580
which is AWS load balancer TLS

14:26.580 --> 14:30.480
and you'll find the TLS key and then TLS certificate.

14:30.480 --> 14:33.420
So we'll take the certificate and then decode it and then

14:33.420 --> 14:34.530
understand in detail.

14:34.530 --> 14:37.350
So let me copy it here and go here

14:37.350 --> 14:39.720
and remove this and paste it here.

14:39.720 --> 14:41.640
And then decode, so

14:41.640 --> 14:45.242
No, no, let me remove this.

14:45.242 --> 14:47.040
I'll just say base64 decode.

14:47.040 --> 14:51.990
Let me close these things and this is the certificate.

14:51.990 --> 14:56.370
And I'll say decode and you got the certificate here, copy.

14:56.370 --> 15:00.390
And I'll say SSLs checker cert decoder,

15:00.390 --> 15:02.490
and decode this certificate.

15:02.490 --> 15:04.230
And you'll find something here.

15:04.230 --> 15:06.652
The common name of this certificate is

15:06.652 --> 15:09.000
AWS load balancer controller.

15:09.000 --> 15:13.110
So the WebHook service, right, is listening on 4-4-3,

15:13.110 --> 15:16.950
and load balancer controller is listening on 9-4-4-3.

15:16.950 --> 15:19.410
And these needs these certificates, right?

15:19.410 --> 15:22.260
And the SAN certificate names for these things,

15:22.260 --> 15:25.830
AWS load balancer, webhookservice.kubesystem,

15:25.830 --> 15:27.443
and AWS load balancer

15:27.443 --> 15:30.270
webhookservice.kubesystem.svc.

15:30.270 --> 15:32.790
So these are the additional SAN names available

15:32.790 --> 15:35.730
for this respect to certificate.

15:35.730 --> 15:36.570
So that's it.

15:36.570 --> 15:39.150
So this is another additional information

15:39.150 --> 15:42.060
which we need to understand about port 4-4-3

15:42.060 --> 15:44.910
and then port 9-4-4-3 for service

15:44.910 --> 15:49.320
and ports for the AWS load balancer controller.

15:49.320 --> 15:51.750
So if you open it and then see it in detail

15:51.750 --> 15:54.690
if you want to go to that load balancer controller part

15:54.690 --> 15:57.870
and go to the volume mounts and verify the mount path

15:57.870 --> 16:01.140
for serving such there, and also verify the volumes

16:01.140 --> 16:03.750
you'll get the additional understanding about those parts.

16:03.750 --> 16:05.670
We really don't need to worry

16:05.670 --> 16:10.050
or go in this deep for this respect to things

16:10.050 --> 16:11.910
but for additional understanding,

16:11.910 --> 16:13.950
it is always good to know more, right?

16:13.950 --> 16:16.590
So that's the reason this 0-4-0-5 is

16:16.590 --> 16:18.330
always optional for you,

16:18.330 --> 16:21.210
but I have put them for additional understanding.

16:21.210 --> 16:22.950
So I'll see you in the next lecture.

16:22.950 --> 16:24.570
Until then, bye bye.

16:24.570 --> 16:25.403
Thank you.

16:25.403 --> 16:29.310
So before going to next lecture, so this is step 0-4-0-7

16:29.310 --> 16:31.710
which will help us in uninstalling

16:31.710 --> 16:35.040
the AWS load balancer controller.

16:35.040 --> 16:38.610
Help, uninstall, AWS load balancer controller

16:38.610 --> 16:40.560
from namespace, kubesystem.

16:40.560 --> 16:43.200
So this is optional, we are not going to use it

16:43.200 --> 16:46.830
but just for additional reference I have put it here.

16:46.830 --> 16:48.570
So I'll see you in the next lecture

16:48.570 --> 16:51.270
and discuss about the Ingress class concept.

16:51.270 --> 16:52.770
Until then, bye bye.

16:52.770 --> 16:53.603
Thank you.
