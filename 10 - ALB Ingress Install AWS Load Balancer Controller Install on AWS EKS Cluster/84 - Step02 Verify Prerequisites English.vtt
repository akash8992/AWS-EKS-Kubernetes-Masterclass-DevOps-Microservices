WEBVTT

00:00.360 --> 00:01.530
-: Welcome back.

00:01.530 --> 00:04.650
Let's go back to our GitHub Repository now.

00:04.650 --> 00:06.630
So we are in AWS

00:06.630 --> 00:11.130
stacksimplify/aws-eks-kubernetes-masterclass

00:11.130 --> 00:12.270
internal repository,

00:12.270 --> 00:14.970
which is a profit repository of mine.

00:14.970 --> 00:17.550
And whenever I do the course updates,

00:17.550 --> 00:19.770
so I will add the new section here

00:19.770 --> 00:22.290
and then update the sections in detail here,

00:22.290 --> 00:24.570
all the documentation related to that.

00:24.570 --> 00:26.550
And then when I am publishing,

00:26.550 --> 00:29.910
once everything related to that section is completed.

00:29.910 --> 00:32.670
So I will publish the videos on Udemy

00:32.670 --> 00:36.840
and also ensure that, that (indistinct) section related,

00:36.840 --> 00:39.720
get changes also will be added here.

00:39.720 --> 00:42.630
So this is the public repository where you have the access

00:42.630 --> 00:45.690
which is AWS EKS Kubernetes Masterclass.

00:45.690 --> 00:49.260
And currently inside this you have only 08 ELB.

00:49.260 --> 00:53.790
So there is nothing related to 08 EL, new 08 ELB.

00:53.790 --> 00:57.780
But now once this entire section recording is completed.

00:57.780 --> 01:00.510
So I will ensure that this respective section

01:00.510 --> 01:03.570
related all the changes are also added here

01:03.570 --> 01:06.210
and then you will get access to them.

01:06.210 --> 01:07.740
So far, now the recording

01:07.740 --> 01:10.410
will happen on this internal repository

01:10.410 --> 01:13.320
and we'll move on to the section 0801,

01:13.320 --> 01:15.810
Load Balancer Controller installer.

01:15.810 --> 01:18.150
So this is the first thing we are going to do,

01:18.150 --> 01:20.640
as part of this mega section.

01:20.640 --> 01:23.910
And here, so as part of step 00 Introduction,

01:23.910 --> 01:27.420
we already understood what is Load Balancer Controller

01:27.420 --> 01:30.330
and then how it is going to have the objects

01:30.330 --> 01:32.250
inside Kubernetes and then how it is going

01:32.250 --> 01:34.740
to create the Application Load Balancer

01:34.740 --> 01:36.060
and all those things.

01:36.060 --> 01:39.660
So this is primarily on a high level if you see it.

01:39.660 --> 01:42.060
We are going to create a IAM policy

01:42.060 --> 01:44.520
and make a note of that policy ARN.

01:44.520 --> 01:47.970
And then we are also going to create a IAM role

01:47.970 --> 01:51.330
and associate this IAM policy to this I am role.

01:51.330 --> 01:54.570
And also we'll create a Kubernetes service account

01:54.570 --> 01:55.800
and bind this role,

01:55.800 --> 01:58.020
and then service account together.

01:58.020 --> 02:02.730
By annotating this service account with this role ARN.

02:02.730 --> 02:05.490
That is what we have seen in the picture here.

02:05.490 --> 02:07.560
So we'll create a IAM policy

02:07.560 --> 02:10.440
and that is associated to the IAM role here,

02:10.440 --> 02:13.200
and this IAM role related ARN,

02:13.200 --> 02:16.890
will be annotated in the Kubernetes service account, here.

02:16.890 --> 02:18.570
So let's come back here.

02:18.570 --> 02:20.130
And in addition to that,

02:20.130 --> 02:21.720
we are also going to install

02:21.720 --> 02:24.180
the AWS Load Balancer Controller

02:24.180 --> 02:25.440
using the (indistinct) CLI

02:27.480 --> 02:30.750
and also understand about the new concept,

02:30.750 --> 02:34.440
introduced inside this AWS Load Balancer Controller.

02:34.440 --> 02:36.510
So is ingress class concept?

02:36.510 --> 02:38.400
And we are going to understand that.

02:38.400 --> 02:40.710
And also whatever the ingress controller,

02:40.710 --> 02:42.600
we are going to install.

02:42.600 --> 02:45.360
We are going to make that as the default one.

02:45.360 --> 02:47.490
So we'll see all those things in detail

02:47.490 --> 02:50.280
when we are implementing these steps, right.

02:50.280 --> 02:53.490
So far, now we'll move on to the prerequisite steps here.

02:53.490 --> 02:55.470
So we have three prerequisites

02:55.470 --> 02:58.110
which we are going to implement now.

02:58.110 --> 03:00.150
So the first prerequisite is,

03:00.150 --> 03:02.610
ensure that you have the eksctl

03:02.610 --> 03:05.850
and then kubectl command line utility installed.

03:05.850 --> 03:07.800
So as part of the prerequisite section

03:07.800 --> 03:08.633
of this course,

03:08.633 --> 03:10.140
already they were installed

03:10.140 --> 03:12.630
but we will crosscheck once, right?

03:12.630 --> 03:15.090
So we'll say eksctl and version.

03:16.740 --> 03:19.110
So as on today this is the latest version

03:19.110 --> 03:20.490
but whenever you are doing it

03:20.490 --> 03:22.980
it might be a different version too.

03:22.980 --> 03:25.620
And also we'll see the kubectl

03:25.620 --> 03:30.620
and we'll say version and hyphen hyphen shot, right?

03:30.750 --> 03:32.910
So it'll provide both the client version

03:32.910 --> 03:35.100
and also the server version.

03:35.100 --> 03:38.730
So the client version I'm using is v1.22.4

03:38.730 --> 03:42.360
and the server version is 1.21.5.

03:42.360 --> 03:43.650
And if you see the note here,

03:43.650 --> 03:45.840
you must use a kubectl version that is

03:45.840 --> 03:48.360
within one minor version difference

03:48.360 --> 03:51.600
of your Amazon EKS cluster control plane.

03:51.600 --> 03:56.220
For example, if you're using the 1.20 kubectl client.

03:56.220 --> 03:57.990
So you can use the Kubernetes cluster

03:57.990 --> 03:59.623
of version 1.19, 1.20

03:59.623 --> 04:01.620
and then 1.21.

04:01.620 --> 04:06.090
So this means that as our client version is 1.22

04:06.090 --> 04:07.650
our server version supported

04:07.650 --> 04:12.103
here are 1.21, 1.22, and also 1.23.

04:13.470 --> 04:15.390
So now let's come back here

04:15.390 --> 04:18.180
and move to the next prerequisite.

04:18.180 --> 04:21.120
Next prerequisite is create your EKS cluster

04:21.120 --> 04:23.340
and worker nodes if not created.

04:23.340 --> 04:26.010
So we already created the EKS cluster

04:26.010 --> 04:28.390
as part of section 0102

04:29.610 --> 04:34.470
and also as part of section 0701,

04:34.470 --> 04:36.990
which is nothing but we have created as part

04:36.990 --> 04:40.380
of this respective section a private node group.

04:40.380 --> 04:42.180
So if you see in 01, right?

04:42.180 --> 04:46.520
In section 0102 we have created the EKS cluster

04:47.640 --> 04:50.010
and also we have created a,

04:50.010 --> 04:53.370
and associated a (indistinct) or IDC provider.

04:53.370 --> 04:57.333
And after that as part of section 0701,

04:58.380 --> 05:01.770
we have created a EKS private node group.

05:01.770 --> 05:03.960
So both things are completed now,

05:03.960 --> 05:06.780
which means we should already have the EKS cluster

05:06.780 --> 05:09.930
and EKS node groups in our private subnets.

05:09.930 --> 05:12.150
But it is a additional crosscheck

05:12.150 --> 05:14.280
whether those were present or not.

05:14.280 --> 05:16.530
And if those were not present then you can go ahead

05:16.530 --> 05:19.140
and then directly execute this command,

05:19.140 --> 05:21.810
and this command, and this command.

05:21.810 --> 05:25.470
These three commands, to create them immediately.

05:25.470 --> 05:28.080
And as those were already created,

05:28.080 --> 05:31.440
so now we'll go back to our EC2,

05:31.440 --> 05:34.050
which is our AWS Management Console,

05:34.050 --> 05:35.790
and verify that we have

05:35.790 --> 05:37.830
the two private node instances

05:37.830 --> 05:39.120
running in a node group

05:39.120 --> 05:43.470
and we can go to EKS Elastic Kubernetes Service

05:43.470 --> 05:45.960
and also verify the same things

05:45.960 --> 05:48.240
here on a very high level, right?

05:48.240 --> 05:50.370
So we'll go to EKS cluster

05:50.370 --> 05:53.400
and eksdemo1 cluster is up and running,

05:53.400 --> 05:57.600
whose Kubernetes version is 1.21 as on today.

05:57.600 --> 06:01.380
And if you see here, so let's wait for it.

06:01.380 --> 06:03.300
So two nodes are running there

06:03.300 --> 06:05.280
and the current workloads you can see,

06:05.280 --> 06:08.610
code DNS, AWS node and then kube-proxy.

06:08.610 --> 06:10.170
And the configuration information

06:10.170 --> 06:12.570
we can see here in detail.

06:12.570 --> 06:14.730
So this is what we have

06:14.730 --> 06:17.250
and then ready for us so that we can go ahead

06:17.250 --> 06:22.250
and then directly install the AWS Load Balancer Controller.

06:23.010 --> 06:25.500
So once the prerequisite two verification

06:25.500 --> 06:27.420
of these things were completed.

06:27.420 --> 06:28.920
So we'll go back here

06:28.920 --> 06:33.920
and also verify the same things using eksctl commands.

06:34.440 --> 06:37.950
So eksctl and you'll say, get cluster,

06:37.950 --> 06:40.350
and you'll find that eksdemo1 cluster

06:40.350 --> 06:42.450
is up and running.

06:42.450 --> 06:44.160
See eksdemo1

06:44.160 --> 06:46.743
and it is created using eksctl CLI.

06:47.760 --> 06:50.160
And we can get the node groups

06:50.160 --> 06:52.920
for this respective eksdemo1 cluster.

06:52.920 --> 06:54.720
So let me copy this command

06:54.720 --> 06:57.270
and run it here and see the node group

06:57.270 --> 07:01.470
associated with this respective eksdemo1 cluster.

07:01.470 --> 07:05.880
So you can see eksdemo1 ng private1 is the node group name.

07:05.880 --> 07:07.470
So which is already created

07:07.470 --> 07:10.650
and it has currently two nodes running.

07:10.650 --> 07:13.890
And verify if any IAM service accounts

07:13.890 --> 07:17.220
present inside this EKS cluster.

07:17.220 --> 07:19.320
So let me see that too.

07:19.320 --> 07:22.710
So eksctl get IAM service account

07:22.710 --> 07:25.200
and provide that cluster name.

07:25.200 --> 07:28.260
So it'll say that there are no IAM service accounts

07:28.260 --> 07:30.750
found inside this EKS cluster.

07:30.750 --> 07:31.770
Okay, fine.

07:31.770 --> 07:34.080
And another important thing here is

07:34.080 --> 07:38.940
if you have not configured your kubectl, kube config.

07:38.940 --> 07:41.250
So whenever the EKS cluster is created

07:41.250 --> 07:43.590
it'll automatically get created,

07:43.590 --> 07:46.770
the kube config which is located in,

07:46.770 --> 07:51.770
dollar, home, slash, dot, kube, slash, config.

07:52.350 --> 07:54.480
So this will have the information.

07:54.480 --> 07:56.070
so I'll say, cat.

07:56.070 --> 07:57.750
And this will have the information

07:57.750 --> 08:02.220
about connecting to our EKS cluster using kubectl.

08:02.220 --> 08:04.710
All the authentication information.

08:04.710 --> 08:06.930
And if, if by any chance

08:06.930 --> 08:10.380
whenever you run the command kubectl get nodes

08:10.380 --> 08:13.470
and you are not getting any output

08:13.470 --> 08:15.690
from this local desktop CLI,

08:15.690 --> 08:17.070
you are not able to connect

08:17.070 --> 08:21.090
to your remote EKS cluster instances in AWS Cloud

08:21.090 --> 08:23.880
and you are not getting this type of output.

08:23.880 --> 08:25.620
So then you can go ahead

08:25.620 --> 08:27.210
and then run this command,

08:27.210 --> 08:30.270
AWS EKS and in which region your cluster

08:30.270 --> 08:33.300
is created and you can say, update kube config

08:33.300 --> 08:36.240
and provide the name of your cluster here.

08:36.240 --> 08:38.940
So my name of my cluster is eksdemo1

08:38.940 --> 08:41.640
which you can get using eksctl get cluster

08:41.640 --> 08:43.170
to get the cluster name,

08:43.170 --> 08:45.420
and then update your cluster name here,

08:45.420 --> 08:46.830
and run this command.

08:46.830 --> 08:49.170
So I will, what I'm going to do is,

08:49.170 --> 08:53.550
so I will empty my kube config here, right?

08:53.550 --> 08:56.430
So I'll say dot kube and config file.

08:56.430 --> 08:59.580
In dot kube folder, I have the config file

08:59.580 --> 09:01.800
and that I have cleared it,

09:01.800 --> 09:05.550
and if I say, cat, for that file, nothing is there.

09:05.550 --> 09:08.700
So now I will run this command,

09:08.700 --> 09:11.400
so that again it will reconfigure

09:11.400 --> 09:14.250
or it has added the content there

09:14.250 --> 09:16.080
and you can see all this is added.

09:16.080 --> 09:18.360
So before that, what I'm going to do is,

09:18.360 --> 09:20.970
so first I'll clear that, right?

09:20.970 --> 09:23.040
And then run the kubectl get nodes

09:23.040 --> 09:25.320
and then see what happens, right?

09:25.320 --> 09:26.880
So let me run the get nodes

09:26.880 --> 09:29.790
and it says that connection to the server was refused

09:29.790 --> 09:32.670
because there is no configuration information

09:32.670 --> 09:37.080
for kubectl to connect to yours AWS EKS cluster.

09:37.080 --> 09:40.350
So it has no information about to which EKS cluster

09:40.350 --> 09:42.300
this kubectl command need to connect

09:42.300 --> 09:44.370
and get the nodes information.

09:44.370 --> 09:47.640
So we'll run this command, which is AWS EKS,

09:47.640 --> 09:50.220
region; US East 1, update; kube config,

09:50.220 --> 09:51.960
name; eksdemo1.

09:51.960 --> 09:55.350
And now we'll run that kubectl get nodes

09:55.350 --> 09:56.700
and we'll get the information

09:56.700 --> 09:58.830
because our local config file

09:58.830 --> 10:01.110
has the information, connectivity information

10:01.110 --> 10:05.340
to our remote EKS cluster running on our AWS Cloud.

10:05.340 --> 10:07.050
So this is good.

10:07.050 --> 10:10.560
And these are the prerequisites we need to crosscheck

10:10.560 --> 10:13.140
which is you have your EKS cluster up and running,

10:13.140 --> 10:15.240
and you are able to connect it

10:15.240 --> 10:18.270
to using kubectl get nodes,

10:18.270 --> 10:22.680
so that your kubectl CLI is configured perfectly with that.

10:22.680 --> 10:24.360
So that's what we are supposed to

10:24.360 --> 10:26.640
verify all these prerequisites.

10:26.640 --> 10:28.560
So in our next lecture we are going to

10:28.560 --> 10:31.410
move on with creating the IAM policy.

10:31.410 --> 10:32.970
So I'll see you in the next lecture.

10:32.970 --> 10:34.200
Until then, bye bye.

10:34.200 --> 10:35.033
Thank you.
