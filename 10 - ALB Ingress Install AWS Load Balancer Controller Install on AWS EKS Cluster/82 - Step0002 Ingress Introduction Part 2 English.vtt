WEBVTT

00:00.000 --> 00:01.230
-: Welcome back.

00:01.230 --> 00:03.660
In this section we are going to understand

00:03.660 --> 00:07.620
about ALB ingress controller on a very high level.

00:07.620 --> 00:10.560
So before going to ALB ingress controller,

00:10.560 --> 00:15.300
we are going to look into AWS application load balancer.

00:15.300 --> 00:18.630
So let's see what is application load balancer,

00:18.630 --> 00:20.610
and then what it supports,

00:20.610 --> 00:23.790
and how this application load balancer

00:23.790 --> 00:27.090
can be created from Kubernetes manifests

00:27.090 --> 00:29.070
using ALB ingress manifest,

00:29.070 --> 00:31.080
using ALB ingress controller.

00:31.080 --> 00:32.940
So we are going to see all those things

00:32.940 --> 00:35.490
in our this respective section, okay?

00:35.490 --> 00:36.810
So let's move on

00:36.810 --> 00:41.010
with the what is application load balancer in AWS, right?

00:41.010 --> 00:42.908
So ALB is a super advanced,

00:42.908 --> 00:46.080
next generation load balancer in AWS.

00:46.080 --> 00:48.270
So it supports tons of features.

00:48.270 --> 00:51.630
Let's see what are those to get a high level idea

00:51.630 --> 00:55.350
on how much it is capable of, okay?

00:55.350 --> 00:58.230
So it supports path-based routing

00:58.230 --> 01:00.690
which is nothing but context path-based routing

01:00.690 --> 01:02.460
for our applications.

01:02.460 --> 01:05.405
So single load balancer can be leverager

01:05.405 --> 01:07.890
for using for multiple applications

01:07.890 --> 01:11.730
hosted on AWS based on context paths, okay?

01:11.730 --> 01:15.120
In the same way it supports host-based routing.

01:15.120 --> 01:16.170
So which means

01:16.170 --> 01:19.410
in addition to context path-based routing,

01:19.410 --> 01:21.810
we can deploy multiple applications.

01:21.810 --> 01:24.330
And then using different host names,

01:24.330 --> 01:26.970
we can route to those respective applications,

01:26.970 --> 01:28.590
back of this load balancer.

01:28.590 --> 01:33.590
Example, apps.couponcloud.com will go to applications, okay?

01:34.170 --> 01:36.660
And users.couponcloud.com

01:36.660 --> 01:39.480
can go to user management REST services.

01:39.480 --> 01:41.070
So something like that, okay?

01:41.070 --> 01:43.020
And next is support

01:43.020 --> 01:46.350
for routing based on fields inside the request

01:46.350 --> 01:49.170
like HTTP headers, HTTP methods,

01:49.170 --> 01:52.410
query parameters, and source IP addresses.

01:52.410 --> 01:54.690
So by seeing these three features itself,

01:54.690 --> 01:57.480
we can understand that it's not only a load balancer,

01:57.480 --> 02:02.480
it is also a routing solution on the HTTP level, okay?

02:02.850 --> 02:05.310
And supports for redirecting request

02:05.310 --> 02:07.860
from one URL to another.

02:07.860 --> 02:10.410
So more or less standard Apache web server

02:10.410 --> 02:14.220
or NGINX related features, it has, okay?

02:14.220 --> 02:18.270
Supporting for a returning a custom HTTP response to,

02:18.270 --> 02:21.810
and supporting for registering Lambda functions as targets.

02:21.810 --> 02:24.630
So anything deployed in AWS WAN service

02:24.630 --> 02:27.060
always integrates with multiple other services.

02:27.060 --> 02:29.790
In the same way, multiple Lambda functions also,

02:29.790 --> 02:30.690
we can register them

02:30.690 --> 02:34.080
to this respective load balancer targets.

02:34.080 --> 02:36.780
In the same way, it supports for load balancers

02:36.780 --> 02:39.390
to authenticate users of our applications

02:39.390 --> 02:42.060
through their corporate or social identities

02:42.060 --> 02:43.830
before routing requests.

02:43.830 --> 02:45.810
So this is a latest feature available.

02:45.810 --> 02:49.740
And then it is for providing the out-of-box authentication

02:49.740 --> 02:53.850
for our applications hosted on this respective load balancer

02:53.850 --> 02:57.060
with our corporate or social identities.

02:57.060 --> 03:00.450
So it also supports containerized applications,

03:00.450 --> 03:03.660
mainly, AWS ECS out of-the-box integrated with this,

03:03.660 --> 03:07.050
respect to application load balancer.

03:07.050 --> 03:09.240
It also supports monitoring the health

03:09.240 --> 03:11.460
of each service independently

03:11.460 --> 03:14.340
as health checks are defined at the target group level.

03:14.340 --> 03:15.173
Okay?

03:15.173 --> 03:17.370
So that is also one important feature.

03:17.370 --> 03:21.240
It supports registering targets by IP addresses.

03:21.240 --> 03:23.610
So due to this support,

03:23.610 --> 03:26.430
we are able to leverage this very effectively

03:26.430 --> 03:29.820
in target with EKS, okay?

03:29.820 --> 03:32.670
So because of this respective feature, okay?

03:32.670 --> 03:35.670
And inside VPC or outside VPC also,

03:35.670 --> 03:37.830
it can do this stuff, okay?

03:37.830 --> 03:39.810
Using the IP address.

03:39.810 --> 03:44.490
And all in all, ALBs latest and greatest load balancer

03:44.490 --> 03:46.740
with many good features.

03:46.740 --> 03:49.620
So this is about what application load balancer

03:49.620 --> 03:51.660
is capable of and what it can do.

03:51.660 --> 03:54.510
So now if this type of load balancers,

03:54.510 --> 03:58.320
if we can use it as a ingress service for us

03:58.320 --> 03:59.520
from Kubernetes,

03:59.520 --> 04:03.540
so we are going to have a leverage of all these features

04:03.540 --> 04:07.320
for our applications hosted on Kubernetes.

04:07.320 --> 04:10.380
So that's the beauty of AWS here, okay?

04:10.380 --> 04:13.890
So which means like AWS application load balancer

04:13.890 --> 04:16.350
can be provisioned for our Kubernetes

04:16.350 --> 04:19.170
using Kubernetes ingress manifest, okay?

04:19.170 --> 04:20.250
So let's move on.

04:20.250 --> 04:22.355
So let's see, what is this ALB IC?

04:22.355 --> 04:26.700
ALB IC is nothing but ALB ingress controller, right?

04:26.700 --> 04:29.610
So ALB IC triggers the creation

04:29.610 --> 04:31.920
of an application load balancer

04:31.920 --> 04:34.950
and the necessary support AWS resources

04:34.950 --> 04:36.450
whenever an ingress resource

04:36.450 --> 04:40.140
is created in the EKS cluster, okay?

04:40.140 --> 04:42.840
With the annotation name kubernetes.io,

04:42.840 --> 04:45.600
ingress.class is equal to ALB.

04:45.600 --> 04:46.433
Okay?

04:46.433 --> 04:50.340
So the ALB ingress controller supports two traffic modes,

04:50.340 --> 04:52.530
instance mode and then IP mode.

04:52.530 --> 04:55.590
We also seen that application load balancer

04:55.590 --> 04:58.320
supports both the traffic modes instance and IP.

04:58.320 --> 04:59.940
So the same things are available

04:59.940 --> 05:02.520
in ALB ingress controller also.

05:02.520 --> 05:04.890
Okay, let's see what are those in detail.

05:04.890 --> 05:07.080
And so this is one more documentation link

05:07.080 --> 05:09.180
for this ALB ingress controller.

05:09.180 --> 05:11.010
So you can review this link,

05:11.010 --> 05:14.010
and then understand annotations inside that and everything

05:14.010 --> 05:15.240
whenever you are going through it.

05:15.240 --> 05:18.120
And when you are going in the advanced sections,

05:18.120 --> 05:20.940
you'll understand more and then more about it.

05:20.940 --> 05:21.773
Okay?

05:21.773 --> 05:25.710
So now let's see the instance mode.

05:25.710 --> 05:27.150
So in instance mode,

05:27.150 --> 05:30.060
ingress controller registers nodes within your cluster

05:30.060 --> 05:31.443
as targets for the ALB.

05:32.430 --> 05:33.780
So which is nothing but,

05:33.780 --> 05:37.110
nodes are nothing but our worker nodes in our EKS cluster

05:37.110 --> 05:38.274
will be registered

05:38.274 --> 05:42.360
to the targets inside the application load balancer.

05:42.360 --> 05:45.810
So traffic reaching the ALBs routed to NodePort

05:45.810 --> 05:48.900
for your service and the proxy to the products.

05:48.900 --> 05:49.770
So which means

05:49.770 --> 05:52.950
like whatever the NodePort services we are going to create

05:52.950 --> 05:55.200
in front of our applications,

05:55.200 --> 05:58.230
means like in front of our application deployments.

05:58.230 --> 06:01.402
So first ALB routes to those NodePort services

06:01.402 --> 06:05.520
and that NodePort service is routing to our ports, okay?

06:05.520 --> 06:08.070
So this is the default traffic mode available

06:08.070 --> 06:11.220
in our ALB ingress manifest, okay?

06:11.220 --> 06:12.930
And you really don't need to define

06:12.930 --> 06:16.110
or specify that implement instance mode.

06:16.110 --> 06:18.210
By default, it is applicable for us,

06:18.210 --> 06:21.360
but we can also explicitly specify it,

06:21.360 --> 06:24.030
like this with target type as instance annotation

06:24.030 --> 06:26.700
in our ingress manifest if we want it.

06:26.700 --> 06:28.830
And we have the IP mode.

06:28.830 --> 06:31.800
So in IP mode, it register paths

06:31.800 --> 06:33.720
as that targets for the ALB.

06:33.720 --> 06:37.110
Here, if you see it register the EKS worker nodes

06:37.110 --> 06:40.440
as targets for our ALB target types, okay?

06:40.440 --> 06:44.493
But here, it registers the ports as targets for the ALB.

06:45.360 --> 06:47.550
So traffic reaching the ALB

06:47.550 --> 06:51.030
is directly routed to our ports for our service.

06:51.030 --> 06:53.610
So now here, if you want to use IP,

06:53.610 --> 06:56.430
then you can use the target type as IP.

06:56.430 --> 06:58.800
So now why these two instance modes

06:58.800 --> 07:03.240
and then how it is useful for us from AWS EKS perspective.

07:03.240 --> 07:05.070
That's the core thing here, right?

07:05.070 --> 07:07.920
So when you are using worker nodes,

07:07.920 --> 07:11.070
means like manager node groups in your EKS cluster,

07:11.070 --> 07:13.860
by default, you can use instance mode.

07:13.860 --> 07:15.660
Or if you want to use IP mode,

07:15.660 --> 07:19.200
still you have an option of using the IP mode.

07:19.200 --> 07:22.680
But when you are using only Fargate-only profile,

07:22.680 --> 07:23.940
which means in your cluster,

07:23.940 --> 07:26.880
you really don't have any other node groups,

07:26.880 --> 07:29.010
manager node groups like EC2 instances,

07:29.010 --> 07:31.440
you are just only using Fargate profiles,

07:31.440 --> 07:34.260
at that point of time, you need to use,

07:34.260 --> 07:37.050
and if you want to use application load balancer,

07:37.050 --> 07:39.780
then you need to use only IP mode.

07:39.780 --> 07:40.613
Why?

07:40.613 --> 07:44.370
Because Fargate nodes doesn't support the NodePort service.

07:44.370 --> 07:45.203
Why?

07:45.203 --> 07:47.100
Because we really don't have control

07:47.100 --> 07:49.020
on Fargate related nodes,

07:49.020 --> 07:51.030
whatever it has created in the background,

07:51.030 --> 07:53.310
because that is a serverless concept, right?

07:53.310 --> 07:56.550
So that's about the reason you need to use IP mode.

07:56.550 --> 07:58.980
So whenever you are using Fargate, for those things

07:58.980 --> 08:02.130
if you need ingress manifest, you can use IP mode.

08:02.130 --> 08:04.830
And whenever you are using manager node groups,

08:04.830 --> 08:08.520
you can use either instance mode or IP mode.

08:08.520 --> 08:11.310
So that's about these traffic modes.

08:11.310 --> 08:12.480
So now moving on.

08:12.480 --> 08:15.690
So let's see how ALB ingress works.

08:15.690 --> 08:19.980
So this diagram, I directly took it from their website,

08:19.980 --> 08:21.420
and we will see what it is,

08:21.420 --> 08:23.877
and then from step by step process, how it looks like.

08:23.877 --> 08:27.870
And the link for this diagram is available here in detail.

08:27.870 --> 08:28.703
Okay?

08:28.703 --> 08:32.460
So now you see this is a Kubernetes cluster, okay?

08:32.460 --> 08:34.830
And these are AWS resources.

08:34.830 --> 08:36.060
So we already said

08:36.060 --> 08:39.690
that whenever we provision our ingress manifest

08:39.690 --> 08:41.190
on the Kubernetes cluster,

08:41.190 --> 08:44.970
it is going to create a AWS resources.

08:44.970 --> 08:47.160
So what are those AWS resources

08:47.160 --> 08:50.280
is what we are going to see now, right?

08:50.280 --> 08:54.030
So in the step one, the controller watches for,

08:54.030 --> 08:56.250
which is nothing but the Kubernetes controller

08:56.250 --> 08:59.370
watches for ingress events from API server.

08:59.370 --> 09:01.770
And when it finds ingress resources

09:01.770 --> 09:03.450
that satisfies the requirements,

09:03.450 --> 09:07.440
it begins the creation of these AWS resources.

09:07.440 --> 09:09.240
So what are those AWS resources?

09:09.240 --> 09:13.410
You can see number two, which is application load balancer.

09:13.410 --> 09:16.680
So application load balancer is created in AWS

09:16.680 --> 09:18.938
for the new ingress resource provision

09:18.938 --> 09:21.540
in a Kubernetes cluster, okay?

09:21.540 --> 09:24.480
But one thing here is this application load balancer

09:24.480 --> 09:28.770
will have a version of ELB v2, okay?

09:28.770 --> 09:31.590
So whenever you see we have two types of resources

09:31.590 --> 09:34.650
in elastic load balancers in AWS.

09:34.650 --> 09:36.434
And this application load balancer,

09:36.434 --> 09:41.100
whatever it is getting created, is ELB v2.

09:41.100 --> 09:44.700
So that's one important note you need to remember, okay?

09:44.700 --> 09:45.533
Why?

09:45.533 --> 09:47.250
Because whenever you are giving IAM permissions,

09:47.250 --> 09:48.420
and all those stuff,

09:48.420 --> 09:49.253
you need to ensure

09:49.253 --> 09:52.410
that ELB v2 also included in those stuff, okay?

09:52.410 --> 09:55.410
And the next thing is target groups, okay?

09:55.410 --> 09:57.300
So now the point number three

09:57.300 --> 09:59.730
is target groups are created in AWS

09:59.730 --> 10:03.540
for each unique Kubernetes service described

10:03.540 --> 10:05.640
in ingress resource, okay?

10:05.640 --> 10:09.630
So whatever the application related NodePort services,

10:09.630 --> 10:11.580
you have defined in your manifest,

10:11.580 --> 10:14.490
so those related stuff has been created.

10:14.490 --> 10:16.630
And with that, including those NodePort services,

10:16.630 --> 10:17.700
it is also going

10:17.700 --> 10:20.910
to create whatever the ports you have defined also, right?

10:20.910 --> 10:22.680
So now another important thing

10:22.680 --> 10:25.620
in your ingress manifest is listeners, right?

10:25.620 --> 10:28.290
So whatever the listeners you specify

10:28.290 --> 10:30.420
for your application load balancer,

10:30.420 --> 10:32.670
those gets created here,

10:32.670 --> 10:35.490
which is ATR 443, whatever you define.

10:35.490 --> 10:37.770
So those listeners also will get created

10:37.770 --> 10:40.380
in your application load balancer.

10:40.380 --> 10:42.420
So finally, rules, right?

10:42.420 --> 10:45.300
So as we said that application load balancer

10:45.300 --> 10:48.060
supports context path-based routing.

10:48.060 --> 10:51.900
So which is nothing but /*, /products, /accounts, okay?

10:51.900 --> 10:53.510
So /* should go to one target group,

10:53.510 --> 10:56.190
/products should go to one target group,

10:56.190 --> 10:59.280
and then /account should go to one target group.

10:59.280 --> 11:01.860
So all these things are supported

11:01.860 --> 11:04.560
in our respective application load balancer,

11:04.560 --> 11:08.820
which we are provisioning you as a Kubernetes manifest.

11:08.820 --> 11:09.653
Okay?

11:09.653 --> 11:11.580
So now another thing here is like,

11:11.580 --> 11:13.350
if you want to delete, right?

11:13.350 --> 11:15.720
So if you want to delete all these things,

11:15.720 --> 11:19.260
just to delete our Kubernetes ingress manifest here,

11:19.260 --> 11:21.600
means like ingress resource,

11:21.600 --> 11:23.580
whatever we have provisioned deleted,

11:23.580 --> 11:26.490
and then all these things will get deleted.

11:26.490 --> 11:29.223
So that's about the ingress on a very high level.
