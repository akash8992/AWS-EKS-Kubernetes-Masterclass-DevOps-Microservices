WEBVTT

00:00.180 --> 00:01.080
-: Welcome back.

00:01.080 --> 00:03.720
So let's get into zero seven classic

00:03.720 --> 00:06.990
and then network load balancers.

00:06.990 --> 00:07.823
So inside that

00:07.823 --> 00:11.940
the first step is to create our EKS private node group.

00:11.940 --> 00:13.920
So let's go ahead and then do that.

00:13.920 --> 00:18.920
So we are going to delete the existing public node group

00:19.050 --> 00:22.380
and then create the new private node group, okay,

00:22.380 --> 00:23.400
in the private subnets.

00:23.400 --> 00:25.050
Okay? So let's go ahead

00:25.050 --> 00:28.170
and then list our current node groups available

00:28.170 --> 00:30.150
in our EKS cluster.

00:30.150 --> 00:33.960
To do so, we need to provide the eksctl get node group

00:33.960 --> 00:37.590
and on which cluster it is available, right?

00:37.590 --> 00:42.590
So eksctl and get node group.

00:42.870 --> 00:44.970
And on which cluster?

00:44.970 --> 00:46.863
Our cluster name is EKSdemo1.

00:49.710 --> 00:50.550
So it'll provide

00:50.550 --> 00:53.160
how many node groups available in our cluster.

00:53.160 --> 00:56.130
We have something called in the cluster, EKSdemo1.

00:56.130 --> 00:59.880
We have EKSdemo1 NG public 1.

00:59.880 --> 01:01.500
Okay? So this public node group,

01:01.500 --> 01:04.020
we are going to delete it now.

01:04.020 --> 01:07.020
So to delete it, eksctl, delete node group

01:07.020 --> 01:08.160
and the node group name

01:08.160 --> 01:10.860
and inside which cluster it need to be deleted.

01:10.860 --> 01:14.133
Okay? So let me copy this and then test it,

01:15.930 --> 01:20.430
so that respective node group will get deleted.

01:20.430 --> 01:21.530
So while we are deleting it,

01:21.530 --> 01:25.380
we really don't need to run anything on these nodes, right?

01:25.380 --> 01:29.100
So we are going to create everything in our private subnets,

01:29.100 --> 01:31.710
so that's the reason we have initiated this.

01:31.710 --> 01:32.850
So now let's go ahead

01:32.850 --> 01:37.850
and then create the EKS node group in private subnets.

01:38.070 --> 01:40.260
So the key option we are going to provide

01:40.260 --> 01:42.600
in addition to the previous whatever we have done

01:42.600 --> 01:44.100
in our other step, right?

01:44.100 --> 01:46.500
So if you open this here,

01:46.500 --> 01:50.760
so in the step EKS, create cluster using eksctl.

01:50.760 --> 01:54.480
If you see here we have created the node group here

01:54.480 --> 01:56.610
which is on the public subnets, right?

01:56.610 --> 01:58.200
So all these are same, okay?

01:58.200 --> 02:00.870
Only original one option we are going to give

02:00.870 --> 02:05.340
which is nothing but the node private networking.

02:05.340 --> 02:08.820
So when we add this additional tag to our command,

02:08.820 --> 02:10.500
so it'll create the node,

02:10.500 --> 02:13.320
all the EKS nodes in the private subnets, okay?

02:13.320 --> 02:16.800
So that's what all the worker nodes in the private subnet.

02:16.800 --> 02:20.010
So that's the reason we said node private networking

02:20.010 --> 02:21.030
at the end of this.

02:21.030 --> 02:23.910
And in addition to that, we also change the name,

02:23.910 --> 02:27.630
eksdemo NG private 1 instead of public 1.

02:27.630 --> 02:32.327
So let me copy this and then paste it, right?

02:33.990 --> 02:38.640
And then it is going to create our node in our worker nodes

02:38.640 --> 02:42.273
in the private subnet once we provide this command.

02:43.530 --> 02:45.390
So it's getting created.

02:45.390 --> 02:47.340
So it might take another two to three minutes

02:47.340 --> 02:49.950
to create this worker node,

02:49.950 --> 02:52.680
so I'll pause the video until then.

02:52.680 --> 02:54.300
So our node group creation

02:54.300 --> 02:56.520
in the private subnets got completed.

02:56.520 --> 02:59.100
So let's go ahead and then verify the stuff now.

02:59.100 --> 03:02.070
So where it is created and all those things.

03:02.070 --> 03:05.670
So verify if this node group is created in private subnets.

03:05.670 --> 03:07.260
So we can verify in two ways.

03:07.260 --> 03:09.900
One is kubectl get nodes hyphen all wide,

03:09.900 --> 03:13.830
will provide the external IP address of the worker nodes.

03:13.830 --> 03:15.720
So, so far in the entire course

03:15.720 --> 03:18.150
whatever we have implemented till now.

03:18.150 --> 03:21.330
So we used to get the external IP address using this command

03:21.330 --> 03:24.960
and using that only with the node port we used to test.

03:24.960 --> 03:29.960
So let's say clear and kubectl get nodes hyphen all wide.

03:31.380 --> 03:33.570
So if it is created in private subnet

03:33.570 --> 03:36.360
it really will not have any public IP, right?

03:36.360 --> 03:40.110
So that's the reason external IP's none,

03:40.110 --> 03:43.590
only we have the internal IP available for us.

03:43.590 --> 03:46.890
So this confirms that our Kubernetes node group

03:46.890 --> 03:50.580
has been created in the private subnets.

03:50.580 --> 03:54.240
But for additional verification we can also do something

03:54.240 --> 03:58.950
like verify the associated subnet details

03:58.950 --> 04:00.480
for this respective node groups.

04:00.480 --> 04:05.480
Okay? So we can go here to the management console, right?

04:06.720 --> 04:11.720
And go to EKS, Elastic Kubernetes Service.

04:17.280 --> 04:19.950
And in EKSdemo1 cluster.

04:19.950 --> 04:23.403
So if we go to networking tab, right?

04:24.510 --> 04:26.700
No, if we go to compute

04:26.700 --> 04:28.673
and if we go to our respective

04:28.673 --> 04:31.530
EKSdemo1 NG private 1, right?

04:31.530 --> 04:34.650
So this is the new node group it has been created

04:34.650 --> 04:37.260
and we can click on any one of the subnets here.

04:37.260 --> 04:40.740
Okay? So I'll click on one subnet here.

04:40.740 --> 04:44.070
And if you go inside that subnet, right?

04:44.070 --> 04:46.530
So the subnets associated to it, okay?

04:46.530 --> 04:48.780
So this is the subnet associated to it.

04:48.780 --> 04:50.340
You can clearly see that

04:50.340 --> 04:53.824
that subnet has the private US east one here,

04:53.824 --> 04:55.320
so it is created in private subnet.

04:55.320 --> 04:57.990
So for additional confirmation you can even

04:57.990 --> 04:59.850
see the route table, right?

04:59.850 --> 05:02.400
So if you see, if it is a public subnet

05:02.400 --> 05:04.980
it will go the outbound traffic or inbound traffic,

05:04.980 --> 05:07.680
everything will be via internet gateway

05:07.680 --> 05:09.330
and not the NAT gateway.

05:09.330 --> 05:11.820
But if it is private means like

05:11.820 --> 05:14.610
via private subnet means it is going to go via

05:14.610 --> 05:18.060
route table will have the NAT gateway via NAT gateway,

05:18.060 --> 05:20.340
whatever it is created, right?

05:20.340 --> 05:23.370
So this is the NAT gateway via which outbound traffic

05:23.370 --> 05:26.460
from our worker nodes is going to go.

05:26.460 --> 05:28.953
So one thing we need to understand here is,

05:30.360 --> 05:35.360
so let me go back and let's get this up fully here.

05:36.750 --> 05:41.750
So now if you see these worker nodes, whatever is there

05:42.330 --> 05:43.770
they'll have the kubelet

05:43.770 --> 05:47.010
which will be communicating to the cluster control plane

05:47.010 --> 05:50.100
which is nothing but EKSdemo1, right?

05:50.100 --> 05:53.340
So that happens via NAT gateway, no?

05:53.340 --> 05:57.090
So that's what is the entire design.

05:57.090 --> 06:02.090
So this completes the creation of node group

06:02.160 --> 06:05.520
in the private subnets, right?

06:05.520 --> 06:07.770
So in our next lecture

06:07.770 --> 06:12.720
we'll focus on implementing the classic load balancer.

06:12.720 --> 06:14.730
So I'll see you in the next lecture.

06:14.730 --> 06:16.380
Until then, bye bye.

06:16.380 --> 06:17.213
Thank you.
