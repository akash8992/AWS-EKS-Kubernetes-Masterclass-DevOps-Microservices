WEBVTT

00:00.000 --> 00:02.340
-: Whatever the canary deployment option,

00:02.340 --> 00:03.840
whatever we have seen is nothing

00:03.840 --> 00:05.460
but a service load balancing

00:05.460 --> 00:08.010
with the selector send in labels.

00:08.010 --> 00:10.860
But what should be the downside of this approach

00:10.860 --> 00:13.980
and then what are the effective best effort options

00:13.980 --> 00:15.420
available in the market,

00:15.420 --> 00:18.930
we are going to look into in this two steps, okay?

00:18.930 --> 00:21.480
So let's go back to our presentation

00:21.480 --> 00:23.130
and if you see here,

00:23.130 --> 00:24.030
the downside,

00:24.030 --> 00:25.380
what is there is,

00:25.380 --> 00:28.020
we are going to discuss now, right?

00:28.020 --> 00:29.220
So let's consider

00:29.220 --> 00:31.290
you are going to have PR 50%

00:31.290 --> 00:34.140
and then canary 50% distribution you want to do

00:34.140 --> 00:38.190
which is like your live running environment 50% distribution

00:38.190 --> 00:39.720
and then canary and environment

00:39.720 --> 00:42.300
you want to distribute the traffic 50%.

00:42.300 --> 00:44.430
So with out of the box and Kubernetes

00:44.430 --> 00:46.830
what are the options available is

00:46.830 --> 00:49.050
only playing with the number of replicas

00:49.050 --> 00:51.060
which is nothing but number of pods.

00:51.060 --> 00:51.930
So let's consider

00:51.930 --> 00:53.370
you have one part for PRD

00:53.370 --> 00:54.990
and then one part for canary.

00:54.990 --> 00:57.810
So you can have 50-50 distributed

00:57.810 --> 01:00.120
or two parts for PRD

01:00.120 --> 01:01.590
and then two parts for canary,

01:01.590 --> 01:04.230
you can say 50-50 distributed.

01:04.230 --> 01:05.640
In the same way you have a case

01:05.640 --> 01:09.420
where you want to distribute 75% of your traffic to PRD

01:09.420 --> 01:12.237
and then 25% of your traffic to canary.

01:13.410 --> 01:14.610
So if that is the case,

01:14.610 --> 01:18.600
definitely you need to have four parts in your deployment.

01:18.600 --> 01:20.790
So 25 for this one,

01:20.790 --> 01:21.623
25 for this,

01:21.623 --> 01:22.680
and then 25 for this,

01:22.680 --> 01:23.513
which is nothing

01:23.513 --> 01:25.140
but three parts for prd

01:25.140 --> 01:27.033
and then one part for canary.

01:28.249 --> 01:29.310
In the same way

01:29.310 --> 01:32.280
if you want 90% traffic distributing for PRD

01:32.280 --> 01:34.350
and then 10% for canary,

01:34.350 --> 01:35.400
in that case

01:35.400 --> 01:37.500
you need to have nine parts for prd

01:37.500 --> 01:39.660
and then one part for canary.

01:39.660 --> 01:43.080
So like this based on the number of percentages,

01:43.080 --> 01:45.510
means like based on the percentage distribution

01:45.510 --> 01:47.970
how you want to distribute between canary

01:47.970 --> 01:50.910
and then broad environments

01:50.910 --> 01:53.130
you need to play with the number of replicas

01:53.130 --> 01:54.990
which is nothing but pods.

01:54.990 --> 01:55.890
So which is,

01:55.890 --> 01:59.130
which will end up in incrementally increasing our ports

01:59.130 --> 02:01.980
and then the distribution might not be as easy

02:01.980 --> 02:03.240
and all these things.

02:03.240 --> 02:05.310
But if you are dealing with very less amount

02:05.310 --> 02:07.800
and then minor amount of ports and then stuff,

02:07.800 --> 02:09.210
this will give us the benefit

02:09.210 --> 02:13.314
instead of going to complex structured environments like,

02:13.314 --> 02:16.140
istio AWS app mesh, okay?

02:16.140 --> 02:17.520
So these are not easy,

02:17.520 --> 02:18.510
they are defined

02:18.510 --> 02:20.490
and then they are evolving.

02:20.490 --> 02:24.030
But what I have seen with AWS app mesh or anything.

02:24.030 --> 02:26.340
So things are not straightforward

02:26.340 --> 02:28.440
and little bit complex.

02:28.440 --> 02:30.510
So whether we want to increase

02:30.510 --> 02:32.310
the complexity of our application,

02:32.310 --> 02:34.710
then we can enter into these service mesh concepts.

02:34.710 --> 02:38.040
If we are in need of those things for our applications.

02:38.040 --> 02:40.920
If really not in the need of those things

02:40.920 --> 02:42.720
are the features they're providing

02:42.720 --> 02:45.930
is not really needed for us today

02:45.930 --> 02:47.520
then we really don't need to go there.

02:47.520 --> 02:49.770
If things solve with the simple things

02:49.770 --> 02:52.050
then try to solve it in a simple way.

02:52.050 --> 02:54.600
Now let's go to with the AWS app mesh or anything

02:54.600 --> 02:56.670
how it is going to look like.

02:56.670 --> 03:00.810
So if I say broad 95% and canary 95%, okay?

03:00.810 --> 03:03.330
So still, or for only a single part

03:03.330 --> 03:06.030
the 5% traffic will be routed

03:06.030 --> 03:08.220
and if it is broad 70% in canary,

03:08.220 --> 03:11.550
30% also still whatever the traffic coming

03:11.550 --> 03:15.270
it'll try to route the from the entire traffic.

03:15.270 --> 03:17.862
30% it will route to the canary

03:17.862 --> 03:19.590
and 70% to the remaining ports.

03:19.590 --> 03:20.490
So if you see here

03:20.490 --> 03:24.090
in both cases the number of ports doesn't change

03:24.090 --> 03:27.000
because the respective AWS app mesh

03:27.000 --> 03:29.760
will sit in front of these respective ports

03:29.760 --> 03:31.980
and act as a NY proxy

03:31.980 --> 03:32.910
and then decide

03:32.910 --> 03:35.460
how we need to send the traffic to these things.

03:35.460 --> 03:37.320
You'll have app mesh related gateway

03:37.320 --> 03:38.580
and then our,

03:38.580 --> 03:40.569
you can call it in Kubernetes terms of

03:40.569 --> 03:42.660
AWSs app mesh controller

03:42.660 --> 03:45.000
and then you'll also have NY proxy

03:45.000 --> 03:47.640
in front of this each parts sitting

03:47.640 --> 03:50.490
so that they will control the traffic,

03:50.490 --> 03:51.390
count the traffic

03:51.390 --> 03:53.160
and then control to this parts.

03:53.160 --> 03:53.993
In the same way,

03:53.993 --> 03:57.780
even if you want prod 20% and canary 80% also

03:57.780 --> 04:00.660
still this deployment might work for you

04:00.660 --> 04:02.370
with only four number of parts.

04:02.370 --> 04:03.420
Only thing is this,

04:03.420 --> 04:05.850
this part is going to get overloaded.

04:05.850 --> 04:07.470
So at that time maybe you will say

04:07.470 --> 04:09.390
that canary three replicas

04:09.390 --> 04:11.460
and then PR only one replica.

04:11.460 --> 04:13.620
So like that also we can change and use it

04:13.620 --> 04:15.720
but on on a overall basis,

04:15.720 --> 04:16.710
whatever maybe

04:16.710 --> 04:19.920
your percentage of distribution of traffic for prd

04:19.920 --> 04:21.630
and canary are changing.

04:21.630 --> 04:24.840
You really didn't change the number of pros in this parts,

04:24.840 --> 04:27.000
in this entire design.

04:27.000 --> 04:32.000
So that's the beauty of using the AWS app mesh or Istio.

04:33.030 --> 04:36.030
So the best options for doing the candidate deployments

04:36.030 --> 04:37.410
is Istio which is open source

04:37.410 --> 04:39.532
or AWS app MesH,

04:39.532 --> 04:40.532
AWS version of istio

04:41.940 --> 04:45.540
with UI and then lots of stuff integrated

04:45.540 --> 04:48.900
with AWS other services.

04:48.900 --> 04:52.650
So that's about canary deployments end to end.

04:52.650 --> 04:55.380
So in our next section we'll pick up another topic

04:55.380 --> 04:56.820
and then move on.

04:56.820 --> 04:58.590
So I'll see you in the next lecture.

04:58.590 --> 04:59.423
Until then,

04:59.423 --> 05:00.256
bye-bye.

05:00.256 --> 05:01.089
Thank you.
