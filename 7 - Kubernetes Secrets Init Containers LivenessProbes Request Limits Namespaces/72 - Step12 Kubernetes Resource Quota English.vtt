WEBVTT

00:00.150 --> 00:00.983
-: Welcome back.

00:00.983 --> 00:03.210
In this lecture, we are going to understand about

00:03.210 --> 00:06.210
one more Kubernetes concept called, resource quota,

00:06.210 --> 00:08.490
in combination with namespaces.

00:08.490 --> 00:10.710
Combination in the sense, how you can define

00:10.710 --> 00:13.140
the resource quota per namespace.

00:13.140 --> 00:15.060
So that's what we are going to learn.

00:15.060 --> 00:18.030
So let's take like we have a namespace name dev,

00:18.030 --> 00:20.580
and then we have our front end and then backend deployments

00:20.580 --> 00:23.001
and then everything inside that.

00:23.001 --> 00:25.300
So for this respective namespace,

00:25.300 --> 00:26.543
we can allocate a resource quota,

00:27.710 --> 00:30.938
like how much CPU should be allocated for this namespace,

00:30.938 --> 00:32.490
or how much memory it need to be allocated.

00:32.490 --> 00:35.700
So which means, this namespace the resources present

00:35.700 --> 00:38.550
in inside this namespace, the containers or the ports

00:38.550 --> 00:41.820
running inside this namespace cannot use more than

00:41.820 --> 00:45.210
whatever is defined CPU, or memory.

00:45.210 --> 00:48.090
In the same way you can even define other services like

00:48.090 --> 00:51.420
ports or services or config maps, or other stuff.

00:51.420 --> 00:54.930
Like, we can define in such a way that we can have

00:54.930 --> 00:57.930
only five ports running in this namespace,

00:57.930 --> 01:00.504
anything other than that it should not run.

01:00.504 --> 01:02.850
So like that we can limit the number of resources

01:04.190 --> 01:07.650
to specific namespace using resource quota.

01:07.650 --> 01:09.850
So in the QA or in staging everywhere

01:10.786 --> 01:12.300
you can define these resource quotas.

01:12.300 --> 01:16.470
So this is the sample manifest of the resource quota.

01:16.470 --> 01:19.020
So the kind it is going to be resource quota,

01:19.020 --> 01:21.863
and the metadata name is NS hyphen resource hyphen quota.

01:21.863 --> 01:25.560
And the namespace it belongs to is the dev 3 namespace.

01:25.560 --> 01:27.730
And in spec you can see that it starts with

01:28.703 --> 01:30.677
the hard limits. With the hard limits,

01:30.677 --> 01:32.460
whatever we are going to define for those resources

01:32.460 --> 01:35.520
in specific to that respective namespace.

01:35.520 --> 01:38.040
Like number of ports should be, five ports.

01:38.040 --> 01:40.940
So if you try to run more than five ports,

01:40.940 --> 01:42.900
those are not going to schedule

01:42.900 --> 01:45.240
on this respective namespace.

01:45.240 --> 01:48.390
So I have running like, two ports now,

01:48.390 --> 01:51.390
and if I try to scale any of this like front end or back end

01:51.390 --> 01:54.690
to another 10 parts, so it is not going to take in place

01:54.690 --> 01:57.771
when the resource quota is defined to be five,

01:57.771 --> 02:00.270
even though it takes and then takes the request from us,

02:00.270 --> 02:05.100
but it will not schedule those ports inside this namespace.

02:05.100 --> 02:06.990
So which means, it is invalid.

02:06.990 --> 02:11.051
So maximum it is going to have is only five ports

02:11.051 --> 02:12.685
whenever we do that also.

02:12.685 --> 02:14.850
So in the same way we can even define five config maps

02:14.850 --> 02:15.873
or how much we want.

02:16.885 --> 02:18.689
Okay, so for this name space, how many,

02:18.689 --> 02:20.284
I want to define the resources,

02:20.284 --> 02:21.117
that many we can define config maps,

02:21.117 --> 02:23.762
or persistent volume claims, or secrets, or services,

02:23.762 --> 02:25.920
or whatever it is, okay?

02:25.920 --> 02:29.100
Even the CPU memory requested, CPU memory unlimited,

02:29.100 --> 02:31.680
CPU memory limits to our CPU, or request our CPU.

02:31.680 --> 02:34.890
Whatever we want, we can define in an orderly manner

02:34.890 --> 02:36.720
in the resource quota.

02:36.720 --> 02:41.280
So now let's go back to our GitHub repo,

02:41.280 --> 02:45.570
and we'll go to 0-5-0-5-0-3, resource quota.

02:45.570 --> 02:47.433
And if you see here as usual,

02:48.479 --> 02:50.156
we already created the namespace earlier,

02:50.156 --> 02:51.865
the same content from previous thing.

02:51.865 --> 02:52.740
We are going to copy it here.

02:52.740 --> 02:55.410
So, and then, in addition to limit range,

02:55.410 --> 02:57.904
we are going to add additional stuff.

02:57.904 --> 02:58.950
So we have the namespace here.

02:58.950 --> 03:00.660
So we have the limit range here,

03:00.660 --> 03:03.750
whatever we had defined in our limit range section

03:03.750 --> 03:05.583
in 0-5-0-5-0-2.

03:06.628 --> 03:09.000
Now, we are going to add the resource quota stuff

03:09.000 --> 03:12.030
whatever we have seen in our presentation.

03:12.030 --> 03:15.138
So we are not going to live template write this.

03:15.138 --> 03:17.663
Why? Because we already written a lot of live templates.

03:17.663 --> 03:20.063
So just like it's already we discussed about it,

03:20.972 --> 03:21.805
it is going to be a kind of resource quota

03:21.805 --> 03:23.913
and inspect under hard.

03:25.211 --> 03:26.857
We are going to have all these items,

03:26.857 --> 03:28.663
whatever we want to add it.

03:28.663 --> 03:30.510
Okay, so we added these things so now we'll go ahead

03:30.510 --> 03:32.631
and then test it now.

03:32.631 --> 03:34.709
Okay, so we added, now we can go ahead and then,

03:34.709 --> 03:36.248
create and then, test it.

03:36.248 --> 03:41.248
Okay, so I'm going to say 0-5 hyphen 0-5 hyphen 0-3.

03:41.432 --> 03:46.432
And kube CTL, apply, hyphen F. and then kube manifest.

03:49.680 --> 03:53.520
So this is going to create everything in dev 3,

03:53.520 --> 03:55.320
the following things, okay?

03:55.320 --> 03:58.803
So including the resource quota stuff,

04:00.510 --> 04:02.010
everything got created.

04:02.010 --> 04:05.430
So now if you want to verify the port CPU and memory,

04:05.430 --> 04:07.941
which we have done in earlier sections,

04:07.941 --> 04:09.518
we can ignore any limits.

04:09.518 --> 04:11.340
Also we have seen earlier, we really don't need to worry.

04:11.340 --> 04:13.886
So we'll start with the quotas.

04:13.886 --> 04:15.860
Okay? So before that we'll say kube CTL, get ports,

04:15.860 --> 04:19.260
and then hyphen dev 3.

04:19.260 --> 04:21.990
So just to see that our things are starting up.

04:21.990 --> 04:23.793
Okay, so they are starting up.

04:24.739 --> 04:27.270
So now let's go ahead and then view the quota information.

04:27.270 --> 04:32.270
Okay, so kube CTL, get quota hyphen dev 3.

04:33.210 --> 04:37.770
Dev 3 is our namespace. So MS resource quota got created.

04:37.770 --> 04:41.850
So now let's copy this, and then describe it.

04:41.850 --> 04:46.850
Okay, kube CTL, describe, quota,

04:48.930 --> 04:52.230
and the quota name is NS resource quota.

04:52.230 --> 04:55.020
And in namespace, hyphen and dev 3.

04:55.020 --> 04:58.080
Right, so now you can see it here.

04:58.080 --> 05:01.020
How many config maps used, is one config map used

05:01.020 --> 05:04.170
out of our hard limit, five config maps.

05:04.170 --> 05:07.605
So limit CPU. I have used one CPU here, out of two.

05:07.605 --> 05:11.340
Okay means like further limit, how much limit is there?

05:11.340 --> 05:15.150
So limits memory, one GI and the hard limit is two GI.

05:15.150 --> 05:18.220
In the same way persistent volume claims we have created

05:19.307 --> 05:21.690
one Myer scale database with EBS as the volume.

05:21.690 --> 05:24.210
So it is going to be one, and then out of five,

05:24.210 --> 05:25.890
we have used one in the same way.

05:25.890 --> 05:28.170
We have two parts here, two out of five.

05:28.170 --> 05:31.830
So like this, whatever we have defined everything, right?

05:31.830 --> 05:33.750
So or means like the hard limit,

05:33.750 --> 05:36.006
and then how much we have used

05:36.006 --> 05:38.940
we can see using kube CTL describe, quota.

05:38.940 --> 05:42.486
In the same way, if you want to go ahead and then access

05:42.486 --> 05:44.070
our application you can say kube CTL

05:44.070 --> 05:46.080
and then get our service port,

05:46.080 --> 05:49.260
and then also get the public IP, and then access it.

05:49.260 --> 05:51.060
So this we are doing from longer time

05:51.060 --> 05:53.010
so I'll leave it to you.

05:53.010 --> 05:57.750
And finally, we'll go ahead and then clean up the stuff.

05:57.750 --> 06:02.750
Okay, so that's about Kubernetes resource quotas.

06:03.387 --> 06:05.100
So in our next lecture,

06:05.100 --> 06:08.280
we'll start with one more important concept wherein

06:08.280 --> 06:12.392
why we should not use this EBS driver with the Myer scale.

06:12.392 --> 06:15.870
Instead of that, why we should use RDS.

06:15.870 --> 06:18.250
All those things we are going to learn

06:19.269 --> 06:22.560
in our next dedicated section for RDS databases

06:22.560 --> 06:24.513
and then Kubernetes as part of that.

06:25.440 --> 06:27.169
Again, one more thing we are going to learn is,

06:27.169 --> 06:29.353
from inside Kubernetes cluster,

06:29.353 --> 06:31.740
how we are going to access external services, okay?

06:31.740 --> 06:35.460
Using external name service, also we are going to look into.

06:35.460 --> 06:37.680
So I'll see you in the next lecture.

06:37.680 --> 06:39.543
Until then, bye bye. Thank you.
