WEBVTT

00:00.000 --> 00:02.479
-: Welcome back, so let's go ahead and then implement

00:02.479 --> 00:03.870
the Kubernetes Secrets

00:03.870 --> 00:07.140
for our application and the database, okay?

00:07.140 --> 00:09.330
So Kubernetes Secrets let us store

00:09.330 --> 00:12.420
and manage sensitive information such as passwords

00:12.420 --> 00:17.420
or auth tokens or SSH keys in a Base64 encoded format.

00:18.690 --> 00:20.640
So storing confidential information

00:20.640 --> 00:24.150
in a Secret is a safer and more flexible way,

00:24.150 --> 00:25.680
instead of putting them directly

00:25.680 --> 00:27.810
like DB password one one or whatever

00:27.810 --> 00:30.330
in the application manifest,

00:30.330 --> 00:32.550
deployment manifests or

00:32.550 --> 00:35.790
even the database related deployment manifests, okay?

00:35.790 --> 00:37.590
So what we are going to do is we are going to

00:37.590 --> 00:41.100
create a secret for our MySQL DB password, okay?

00:41.100 --> 00:43.800
So if you have Base64 installed on your Mac machine

00:43.800 --> 00:45.360
or on your Linux machine,

00:45.360 --> 00:48.300
so my DB password is DB password one one, okay?

00:48.300 --> 00:50.763
So you can directly run this here, okay?

00:52.830 --> 00:54.870
And then get the secret and then update

00:54.870 --> 00:57.480
in your respective Secrets file.

00:57.480 --> 00:59.880
So like this our, you can go to this URL

00:59.880 --> 01:04.140
base64encode.org and then provide

01:04.140 --> 01:06.990
your DB password one one here

01:06.990 --> 01:09.570
in the encode to Base64 format

01:09.570 --> 01:12.420
and then click on encode and then you'll get the value.

01:12.420 --> 01:14.340
So both are going to be same anyway,

01:14.340 --> 01:16.500
but based on your if you're using Windows

01:16.500 --> 01:18.660
and then you don't have Base64 installed

01:18.660 --> 01:20.160
on your Windows machine,

01:20.160 --> 01:23.550
so you can use base64encode.org also.

01:23.550 --> 01:24.870
So now we'll go ahead

01:24.870 --> 01:28.560
and then create the Kubernetes Secrets manifest, okay?

01:28.560 --> 01:31.290
So if you go to this one, right?

01:31.290 --> 01:33.540
So our Visual Studio code editor,

01:33.540 --> 01:36.480
so in zero five Kubernetes important concepts

01:36.480 --> 01:39.360
you can see zero five zero one Kubernetes secrets.

01:39.360 --> 01:42.540
So there in our previous lecture whatever we have created

01:42.540 --> 01:46.380
which is nothing but in zero four zero three, right?

01:46.380 --> 01:48.720
So all those manifests we have brought here

01:48.720 --> 01:50.700
which is nothing but all these seven manifests,

01:50.700 --> 01:53.010
whatever we have created we have brought here.

01:53.010 --> 01:55.320
And then we are going to live edit them

01:55.320 --> 01:58.650
by creating the Kubernetes Secrets file first, okay?

01:58.650 --> 01:59.850
So as usual,

01:59.850 --> 02:03.540
so I have put the Kubernetes standard template here

02:03.540 --> 02:06.180
which is nothing but apiVersion, kind, metadata,

02:06.180 --> 02:07.740
and then spec.

02:07.740 --> 02:10.770
So the kind is going to be secret

02:10.770 --> 02:14.880
and the apiVersion is from core it is V1.

02:14.880 --> 02:17.100
And now the metadata,

02:17.100 --> 02:18.900
the name of the Secret here, right?

02:18.900 --> 02:20.670
So in metadata usually we'll have name

02:20.670 --> 02:22.410
and then labels, right?

02:22.410 --> 02:25.050
So we'll give name that's will be sufficient for us.

02:25.050 --> 02:26.130
So I'm going to say,

02:26.130 --> 02:31.130
MySQL DB password will be the name of my secret, okay?

02:31.710 --> 02:34.440
And instead of spec usually

02:34.440 --> 02:37.080
this will have something called data, okay?

02:37.080 --> 02:40.050
So like how the config map we create with data, right?

02:40.050 --> 02:41.220
It is the same thing.

02:41.220 --> 02:44.070
In addition to that there will be one more top level object

02:44.070 --> 02:46.320
called type and type,

02:46.320 --> 02:47.850
we need to provide Opaque

02:47.850 --> 02:50.130
because our sees a unstructured content

02:50.130 --> 02:52.020
which means like key value pairs.

02:52.020 --> 02:54.120
So we'll show what is that key value pair, no?

02:54.120 --> 02:56.430
So Opaque means, Kubernetes point of view,

02:56.430 --> 02:58.080
the contents of the secret are going

02:58.080 --> 03:00.000
to be unstructured, okay?

03:00.000 --> 03:02.010
So let's see what does that mean, okay?

03:02.010 --> 03:04.620
So you can give, so under data,

03:04.620 --> 03:07.380
so you can give the key value pairs whatever you want.

03:07.380 --> 03:09.900
So I'm providing one key value pair here

03:09.900 --> 03:12.870
and we can get whatever we have generated here, okay?

03:12.870 --> 03:14.250
So this is the password, right?

03:14.250 --> 03:17.700
I'm saying DB password and whatever we have generated

03:17.700 --> 03:18.533
for DB password one one,

03:18.533 --> 03:21.780
The Base64 format I have pasted here.

03:21.780 --> 03:22.890
So if you have something,

03:22.890 --> 03:26.010
even if you want to encode DB username,

03:26.010 --> 03:26.843
you can provide

03:26.843 --> 03:29.430
or if you want to DB host if you want to put

03:29.430 --> 03:31.410
so you can even put DB host.

03:31.410 --> 03:33.210
So like this how many features,

03:33.210 --> 03:35.340
how many you want to put that many

03:35.340 --> 03:37.470
you can put in key value pairs.

03:37.470 --> 03:40.050
So that's the unstructured way of putting it.

03:40.050 --> 03:42.750
So that's the reason we have provided

03:42.750 --> 03:45.210
the type Opaque, okay?.

03:45.210 --> 03:48.930
So now I have provided DB password with DB password one one

03:48.930 --> 03:51.270
which is in Base64 format.

03:51.270 --> 03:52.560
So now we have completed

03:52.560 --> 03:56.130
the Kubernetes secrets file creation here, okay?

03:56.130 --> 03:57.180
So now let's go ahead

03:57.180 --> 04:00.120
and then update our MySQL deployment.

04:00.120 --> 04:01.650
In our MySQL deployment,

04:01.650 --> 04:03.720
if you see here in the environments

04:03.720 --> 04:06.000
you have name is MySQL root password

04:06.000 --> 04:08.400
and the value is DB password one one.

04:08.400 --> 04:11.490
So instead of value directly taking it here

04:11.490 --> 04:13.050
you can do one thing for this, okay?

04:13.050 --> 04:18.050
So let's remove this and say that value from, okay?

04:18.360 --> 04:21.330
So we are getting the value from secrets, okay?

04:21.330 --> 04:22.980
And from where you are getting,

04:22.980 --> 04:27.980
it is getting from the secret key reference, okay?

04:28.500 --> 04:31.830
So secret key ref is that tag here, okay?

04:31.830 --> 04:36.270
So, and you need to provide your two objects here, okay?

04:36.270 --> 04:38.550
So two attributes, okay?

04:38.550 --> 04:42.030
So name and the key, right?

04:42.030 --> 04:44.820
So from which secret it is going to bring the value.

04:44.820 --> 04:49.680
So from mysql-db-password the name of your secret.

04:49.680 --> 04:52.980
So whatever you have provided here the name of the secret.

04:52.980 --> 04:56.040
So this becomes the name and this becomes the key.

04:56.040 --> 04:58.800
So from which key it need to fetch is DB password key

04:58.800 --> 05:00.270
it need to fetch.

05:00.270 --> 05:04.770
So let's go to MySQL deployment and paste it here.

05:04.770 --> 05:05.760
That's all, okay?

05:05.760 --> 05:08.670
So value from, secret key reference,

05:08.670 --> 05:11.970
and name is mysql-db-password,

05:11.970 --> 05:14.850
and the key is DB password.

05:14.850 --> 05:17.040
So now the MySQL root password will be

05:17.040 --> 05:19.440
DB password one one in this manner.

05:19.440 --> 05:22.410
So the same way we can implement the same for our

05:22.410 --> 05:25.500
user management microservice deployment, okay?

05:25.500 --> 05:27.330
For this DB password, okay?

05:27.330 --> 05:29.190
So as usual, one more time.

05:29.190 --> 05:32.460
So we'll say value from, right?

05:32.460 --> 05:35.670
And I will say secret under that the child object

05:35.670 --> 05:38.700
is secret key reference, okay?

05:38.700 --> 05:40.800
And we'll have two child objects here.

05:40.800 --> 05:44.460
Name and then key under secret key reference.

05:44.460 --> 05:49.460
And the name is going to be mysql-db-password.

05:51.660 --> 05:56.660
And the key is going to be db-password, okay?

05:57.570 --> 06:00.630
So now we have updated wherever we have the password

06:00.630 --> 06:01.500
in our application,

06:01.500 --> 06:04.200
we have updated with the secret whatever

06:04.200 --> 06:06.000
we have created, okay?

06:06.000 --> 06:08.100
So now we can go ahead and then implement,

06:08.100 --> 06:10.470
means like we can run the stuff, okay?

06:10.470 --> 06:12.570
So which is nothing but we can run

06:12.570 --> 06:15.780
the Kubernetes manifest here means like apply

06:15.780 --> 06:17.850
or create the manifest and then see what happens.

06:17.850 --> 06:20.610
So create all the objects and then, test it.

06:20.610 --> 06:23.850
So let's go here, and if you see there are nothing running

06:23.850 --> 06:25.980
in my application cluster now,

06:25.980 --> 06:27.780
so what I'm going to say is,

06:27.780 --> 06:31.530
so I am in the zero five zero one kubernetes Secrets folder.

06:31.530 --> 06:35.040
So I'll say ls and then you'll find only the kube manifests.

06:35.040 --> 06:36.330
And if I go there inside that

06:36.330 --> 06:37.830
you can find zero eight secrets.

06:37.830 --> 06:40.020
So I'll come back out of kube manifest,

06:40.020 --> 06:44.360
I'll say clear and I'll say kubectl apply -f

06:46.892 --> 06:48.330
and kube manifests.

06:48.330 --> 06:51.000
So now I should have everything get created

06:51.000 --> 06:53.400
which is nothing but my secrets and then everything

06:53.400 --> 06:55.770
will get created, okay?

06:55.770 --> 06:58.140
So now everything got created.

06:58.140 --> 07:00.330
So now let's see what happens, okay?

07:00.330 --> 07:03.003
So kubectl get pods, okay?

07:03.840 --> 07:07.020
And this container is getting created and this

07:07.020 --> 07:08.940
as usual the user management container

07:08.940 --> 07:10.290
already started and running,

07:10.290 --> 07:11.970
which might fail and then restart

07:11.970 --> 07:13.800
because MySQL is not ready.

07:13.800 --> 07:16.800
So this issue still exists and in our next section

07:16.800 --> 07:18.930
which is initialization containers,

07:18.930 --> 07:21.600
we are going to fix it, okay?

07:21.600 --> 07:24.210
So see one time restart happened that's fine, Okay?

07:24.210 --> 07:26.370
so now everything is up and running.

07:26.370 --> 07:27.510
So mostly,

07:27.510 --> 07:32.043
so kubectl logs,

07:32.910 --> 07:35.100
and then if the DB password is wrong,

07:35.100 --> 07:37.050
then obviously this will not come up

07:37.050 --> 07:38.010
in running state, right?

07:38.010 --> 07:39.030
We'll have issue.

07:39.030 --> 07:41.130
So we'll see that user management came

07:41.130 --> 07:42.840
up successfully or not, okay?

07:42.840 --> 07:43.673
So it's coming up,

07:43.673 --> 07:46.350
let's wait for it to initialize and then see, okay?

07:46.350 --> 07:48.030
so if it initializes properly

07:48.030 --> 07:51.870
and says that started user management service, okay?

07:51.870 --> 07:53.550
See started user management.

07:53.550 --> 07:56.340
So my DB password, whatever I encrypted

07:56.340 --> 07:59.790
and then whatever how we have implemented using secrets

07:59.790 --> 08:01.440
everything is working fine.

08:01.440 --> 08:04.380
Using this thing we can ensure that it is,

08:04.380 --> 08:06.510
we can ensure that it has worked, okay?

08:06.510 --> 08:08.040
So now Control + c,

08:08.040 --> 08:11.100
and then if you want we can go to our browser and then

08:11.100 --> 08:12.087
as usual call it,

08:12.087 --> 08:14.970
the ClusterIP is going to be same and then health is same,

08:14.970 --> 08:15.803
so it is going to work.

08:15.803 --> 08:18.090
Or if you want to go to Postman

08:18.090 --> 08:20.280
and then List all users and then see

08:20.280 --> 08:22.170
it's going to be nothing, okay?

08:22.170 --> 08:24.180
So why, because we have recreated the stuff,

08:24.180 --> 08:25.560
everything right now.

08:25.560 --> 08:28.200
Entire thing we have deleted and then recreated

08:28.200 --> 08:29.280
which means like entire,

08:29.280 --> 08:32.340
all the storage classes and then PVC

08:32.340 --> 08:34.710
everything we have deleted from previous section and created

08:34.710 --> 08:36.480
nothing you can see here, okay?

08:36.480 --> 08:38.850
So health status, you can see it's 200.

08:38.850 --> 08:41.190
In the same way if you want to create the user one more time

08:41.190 --> 08:42.780
you can create the user

08:42.780 --> 08:45.690
and go to list users and then you got the user.

08:45.690 --> 08:46.620
That's all, okay?

08:46.620 --> 08:50.280
so this completes the Secret section.

08:50.280 --> 08:52.740
So what we need to do is as we have completed this

08:52.740 --> 08:54.900
we'll go ahead and then delete all this stuff,

08:54.900 --> 08:56.640
whatever we have created.

08:56.640 --> 08:57.473
In our next section,

08:57.473 --> 08:59.700
again we are going to create it and then see

08:59.700 --> 09:04.170
that how our initialization container swallowed our issue.

09:04.170 --> 09:06.633
So let me remove everything.

09:08.850 --> 09:12.420
So we have deleted everything.

09:12.420 --> 09:14.940
So I'll see you in the next lecture.

09:14.940 --> 09:16.260
Until then, bye bye.

09:16.260 --> 09:17.093
Thank you.
