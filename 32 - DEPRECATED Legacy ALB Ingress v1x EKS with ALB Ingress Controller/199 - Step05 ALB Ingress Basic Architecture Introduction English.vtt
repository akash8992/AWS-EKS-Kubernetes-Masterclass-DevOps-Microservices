WEBVTT

00:00.120 --> 00:00.990
-: Welcome back.

00:00.990 --> 00:03.510
In this lecture, we are going to understand

00:03.510 --> 00:06.780
about AWS application load balancers.

00:06.780 --> 00:08.310
So,

00:08.310 --> 00:10.017
how we are going to create

00:10.017 --> 00:11.880
AWS application load balancers

00:11.880 --> 00:13.320
from Kubernetes?

00:13.320 --> 00:15.570
So there starts the concept called

00:15.570 --> 00:17.310
Ingress controller.

00:17.310 --> 00:19.290
So using Ingress manifest,

00:19.290 --> 00:21.240
whatever we write in Kubernetes,

00:21.240 --> 00:23.070
using that, we can create

00:23.070 --> 00:25.417
application load balancers on AWS.

00:26.310 --> 00:27.840
So we are going to learn

00:27.840 --> 00:31.350
a basic, very basic fundamental, Ingress manifest,

00:31.350 --> 00:32.880
which we are going to create

00:32.880 --> 00:35.460
as part of this entire section,

00:35.460 --> 00:37.110
Ingress controller basics.

00:37.110 --> 00:38.700
So we are going to create that.

00:38.700 --> 00:39.990
So as a foundation thing,

00:39.990 --> 00:40.830
as a first step,

00:40.830 --> 00:43.710
what we are going to do, let's see, right?

00:43.710 --> 00:48.120
So, in zero to ALB Ingress basics, right?

00:48.120 --> 00:49.140
As a step one,

00:49.140 --> 00:50.490
we are going to discuss about

00:50.490 --> 00:51.900
the application architecture

00:51.900 --> 00:55.050
which we are going to deploy as part of this, right?

00:55.050 --> 00:57.900
So we need some real time application here,

00:57.900 --> 00:59.100
so when we deploy it

00:59.100 --> 01:01.200
we get a complete understanding

01:01.200 --> 01:02.340
on what we are doing.

01:02.340 --> 01:06.360
So let's go ahead and then, do that now.

01:06.360 --> 01:08.890
So let's go back to our PowerPoint

01:09.750 --> 01:12.030
and we'll see the network design

01:12.030 --> 01:13.890
about what we are going to implement

01:13.890 --> 01:16.890
as part of this section, right?

01:16.890 --> 01:19.890
So in AWS cloud, right?

01:19.890 --> 01:22.710
So whenever we create the EKS cluster,

01:22.710 --> 01:24.690
which is nothing but the control plane,

01:24.690 --> 01:27.810
it automatically creates the VPC

01:27.810 --> 01:29.610
and also creates the public,

01:29.610 --> 01:31.230
and then private subnets,

01:31.230 --> 01:34.890
and also it creates the NAD gateway.

01:34.890 --> 01:37.560
So all these things gets created automatically

01:37.560 --> 01:41.160
whenever we create the EKS cluster.

01:41.160 --> 01:42.581
So after that,

01:42.581 --> 01:44.640
what we do is like,

01:44.640 --> 01:47.460
we create our worker node group, right?

01:47.460 --> 01:49.410
So we create a private node group

01:49.410 --> 01:50.910
in the private subnets;

01:50.910 --> 01:52.830
it creates two worker nodes,

01:52.830 --> 01:53.670
worker node one

01:53.670 --> 01:56.310
and then worker node two, in Kubernetes.

01:56.310 --> 01:58.740
So, these worker nodes will communicate

01:58.740 --> 02:00.660
with the cluster control plane

02:00.660 --> 02:02.910
using the NAD gateways present

02:02.910 --> 02:05.130
in the public subnet.

02:05.130 --> 02:06.240
So the next step here,

02:06.240 --> 02:08.070
is for our application

02:08.070 --> 02:09.660
whatever we are going to deploy,

02:09.660 --> 02:12.570
which is nothing but the user management microservice

02:12.570 --> 02:14.100
application, right?

02:14.100 --> 02:17.070
So it needs a my scale database.

02:17.070 --> 02:20.340
So we are going to use RDS database here,

02:20.340 --> 02:23.730
as our underlying DB for our application.

02:23.730 --> 02:26.910
And so, to connect to this RDS DB

02:26.910 --> 02:29.400
from our Kubernetes cluster,

02:29.400 --> 02:31.980
so we use the ExternalName service

02:31.980 --> 02:33.360
to connect to those.

02:33.360 --> 02:34.620
In addition to that,

02:34.620 --> 02:36.360
we will deploy our UMS,

02:36.360 --> 02:39.000
which is our User Management Microservice application

02:39.000 --> 02:41.520
as a deployment in worker modes.

02:41.520 --> 02:43.740
So we deployed only one replica,

02:43.740 --> 02:45.570
it might be any one of the worker nodes,

02:45.570 --> 02:48.120
it will get deployed, right?

02:48.120 --> 02:50.310
So the next thing is,

02:50.310 --> 02:53.040
to expose this application.

02:53.040 --> 02:56.190
So we are going to create a NodePort service,

02:56.190 --> 02:57.660
so which means like,

02:57.660 --> 03:01.740
so to expose this UMS application

03:01.740 --> 03:03.660
to the public subnets,

03:03.660 --> 03:05.430
where the application load balancer

03:05.430 --> 03:07.260
is going to access it,

03:07.260 --> 03:10.290
we create a NodePort service, right?

03:10.290 --> 03:12.660
And this NodePort service also,

03:12.660 --> 03:13.710
what we are going to do is,

03:13.710 --> 03:15.000
we are not going to provide

03:15.000 --> 03:17.790
any specific NodePort there.

03:17.790 --> 03:19.950
So any dynamic node NodePort,

03:19.950 --> 03:21.840
it can pick from the worker node,

03:21.840 --> 03:23.790
we'll leave that way, right?

03:23.790 --> 03:26.190
So we created a NodePort service here,

03:26.190 --> 03:27.780
and then we'll move onto

03:27.780 --> 03:30.930
the Ingress concept now, right?

03:30.930 --> 03:32.820
So, let's move on.

03:32.820 --> 03:35.040
So now, in the public subnet,

03:35.040 --> 03:37.230
our Ingress comes into the picture.

03:37.230 --> 03:39.137
So which is nothing but

03:39.137 --> 03:40.830
the application load balancer.

03:40.830 --> 03:42.360
So we'll write the Ingress manifest

03:42.360 --> 03:43.650
and then deploy that,

03:43.650 --> 03:47.460
so that it creates the application load balancer.

03:47.460 --> 03:50.190
And when we are writing the Ingress manifest,

03:50.190 --> 03:53.130
we will tell that whenever a request comes

03:53.130 --> 03:54.540
with '/tar',

03:54.540 --> 03:56.760
it should go to this deployment,

03:56.760 --> 04:00.837
which is nothing but this respect to UMS pod, right?

04:00.837 --> 04:02.587
So now, users, right,

04:03.556 --> 04:08.556
whenever the users access 'ALB DNS URL/userMGMT/users',

04:09.010 --> 04:11.533
which is nothing but the list users API

04:11.533 --> 04:14.471
in our user management application, okay?

04:14.471 --> 04:16.618
And whenever they access it

04:16.618 --> 04:18.986
with 'ALB DNS URL with HTTP'

04:18.986 --> 04:21.527
the default pod is HTTP, right?

04:21.527 --> 04:23.239
So it comes here,

04:23.239 --> 04:25.155
and then it verifies '/tar'

04:25.155 --> 04:26.241
where it should go,

04:26.241 --> 04:29.850
it should go to this respective EMS pod.

04:29.850 --> 04:30.840
So how it is going,

04:30.840 --> 04:32.610
it'll go where NodePort service,

04:32.610 --> 04:35.370
which means in this application load balancer,

04:35.370 --> 04:37.020
whatever it created,

04:37.020 --> 04:38.550
that target group, right?

04:38.550 --> 04:40.290
The targets inside target group

04:40.290 --> 04:43.050
are going to be both worker nodes,

04:43.050 --> 04:45.930
with the whatever the NodePort it has provided

04:45.930 --> 04:50.220
as part of user management NodePort service.

04:50.220 --> 04:51.900
So now the request comes here,

04:51.900 --> 04:55.230
and then it needs to communicate with the database.

04:55.230 --> 04:56.460
So it'll come and then connect

04:56.460 --> 04:59.010
to the my scale ExternalName service.

04:59.010 --> 05:01.350
And then from there, it'll go to the RDS database

05:01.350 --> 05:03.120
and then take the list of users,

05:03.120 --> 05:04.870
and then display to the

05:05.790 --> 05:08.220
users on the browser, right?

05:08.220 --> 05:10.440
So that's about the entire architecture

05:10.440 --> 05:13.290
we are going to implement now.

05:13.290 --> 05:15.330
So, I'll see you in the next lecture.

05:15.330 --> 05:16.710
Until then, bye bye.

05:16.710 --> 05:17.543
Thank you.
