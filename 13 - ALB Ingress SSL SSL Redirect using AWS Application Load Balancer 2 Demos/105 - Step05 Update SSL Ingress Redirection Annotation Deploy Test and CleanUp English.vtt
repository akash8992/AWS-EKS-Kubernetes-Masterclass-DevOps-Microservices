WEBVTT

00:00.360 --> 00:01.290
-: Welcome back.

00:01.290 --> 00:02.220
In this demo

00:02.220 --> 00:03.510
we are going to implement

00:03.510 --> 00:07.650
the Kubernetes ingress SSL redirect use case.

00:07.650 --> 00:09.450
So this network diagram

00:09.450 --> 00:10.950
is from our previous section,

00:10.950 --> 00:13.590
which is SSL ingress.

00:13.590 --> 00:15.540
And as part of this section

00:15.540 --> 00:17.430
we are going to add the annotations

00:17.430 --> 00:21.060
related to SSL redirect in the ingress service.

00:21.060 --> 00:24.960
And then whenever we redeploy this Kubernetes manifest

00:24.960 --> 00:29.960
so it is going to do a HTTP to HTTPS redirect

00:30.030 --> 00:31.500
for all the URLs.

00:31.500 --> 00:34.140
So which means all the applications

00:34.140 --> 00:36.030
deployed using this ingress service

00:36.030 --> 00:40.053
will be only accessible using HTTPS URLs.

00:41.064 --> 00:42.630
And whenever you access with HTTP

00:42.630 --> 00:46.260
automatically it'll redirect to HTTPS.

00:46.260 --> 00:48.840
So let's go back to our GitHub repository

00:48.840 --> 00:53.840
and enter into the section 0805 ALB ingress SSL redirect.

00:54.720 --> 00:56.340
So if you see the Kube manifest

00:56.340 --> 00:59.310
so those are going to be same as the previous section

00:59.310 --> 01:03.270
copy of the previous section which is ingress SSL.

01:03.270 --> 01:04.350
Only thing is

01:04.350 --> 01:06.210
we are going to add a annotation

01:06.210 --> 01:08.880
related to SSL redirect.

01:08.880 --> 01:12.870
So let me copy this SSL redirect related annotation

01:12.870 --> 01:14.700
and go to Visual Studio Code.

01:14.700 --> 01:19.440
And we are in section 0805 ALB ingress SSL redirect

01:19.440 --> 01:24.390
and in Kube manifest section 04 ALB ingress SSL redirect.

01:24.390 --> 01:26.940
So you can find here the name of my ingress service

01:26.940 --> 01:29.790
is same thing which is ingress SSL demo.

01:29.790 --> 01:34.170
So if you go here and say kubectl get ingress.

01:34.170 --> 01:38.040
So you'll find the ingress SSL demo related

01:38.040 --> 01:39.120
ingress service only.

01:39.120 --> 01:42.900
So as part of previous demo really didn't clean up anything.

01:42.900 --> 01:47.340
We are continuing tools from 0803 demo to 0804 demo

01:47.340 --> 01:50.310
which is 04 demo to 05 demo

01:50.310 --> 01:54.780
which is ingress SSL to ingress SSL redirect.

01:54.780 --> 01:57.780
See the ingress service is already created

01:57.780 --> 01:59.040
and it is present there.

01:59.040 --> 02:00.570
So for this ingress service

02:00.570 --> 02:03.900
we are going to just add one more annotation

02:03.900 --> 02:07.860
which is nothing but SSL redirect setting.

02:07.860 --> 02:09.480
So in this redirect setting,

02:09.480 --> 02:11.400
so to which port it need to redirect,

02:11.400 --> 02:14.850
we are provided here which is 443, right?

02:14.850 --> 02:18.270
So port 80 will redirect to 443 here.

02:18.270 --> 02:23.270
So now let's come back here and come out of 0804

02:23.520 --> 02:28.520
and go to 0805, which is ALB ingress SSL redirect section.

02:28.740 --> 02:32.220
So there only you have added this change which is

02:32.220 --> 02:34.650
SSL redirect annotation.

02:34.650 --> 02:39.650
So now you'll say kubectl apply -F kube manifest

02:41.370 --> 02:43.380
and there should not be any changes

02:43.380 --> 02:47.460
for your app one app two app three related deployment

02:47.460 --> 02:48.750
and note port services.

02:48.750 --> 02:52.710
So you can see all six should be unchanged

02:52.710 --> 02:54.660
but your ingress SSL demo

02:54.660 --> 02:56.580
should be in the configured state,

02:56.580 --> 02:59.400
which means the ingress annotation,

02:59.400 --> 03:02.130
whatever you have added related to redirect

03:02.130 --> 03:03.870
should be applied now.

03:03.870 --> 03:07.500
So now let's come back here and go to the load balancer

03:07.500 --> 03:10.530
and refresh it and go to listeners.

03:10.530 --> 03:14.820
And if you go to this respect to port 80 listeners, right?

03:14.820 --> 03:16.590
So inside that you should not find

03:16.590 --> 03:19.450
any app one app two app app three related

03:20.312 --> 03:21.810
or default backend related rules now,

03:21.810 --> 03:24.330
so you should have only one thing which says

03:24.330 --> 03:27.660
that redirect to 443 port.

03:27.660 --> 03:29.100
So this is because of

03:29.100 --> 03:32.640
whatever you have added the annotation here.

03:32.640 --> 03:34.080
And if you remove this annotation

03:34.080 --> 03:37.322
all three default rules app one app to app three

03:37.322 --> 03:39.139
will be there how you have seen

03:39.139 --> 03:40.758
in the SSL use case demo, right?

03:40.758 --> 03:45.758
So now let's come back here and test the same thing, right?

03:46.350 --> 03:49.110
So let's access the HTTP URLs

03:49.110 --> 03:52.830
and those should directly redirect to HTTPS.

03:52.830 --> 03:55.200
So in this, if any caching is there

03:55.200 --> 04:00.200
maybe we'll go to the new incognito mode and access it.

04:01.399 --> 04:05.700
And if you see here I am accessing the SSL URL

04:05.700 --> 04:10.700
and it automatically redirected to the SSL

04:10.718 --> 04:13.320
I accessed the HTTP URL

04:13.320 --> 04:15.960
and it redirected to the HTTPS URL

04:15.960 --> 04:18.360
and you can find the certificate here.

04:18.360 --> 04:22.860
And same way we will go back here, right?

04:22.860 --> 04:27.860
And take the app2 URL and come here and access it.

04:27.870 --> 04:30.960
If you see here I'm accessing the HTTP URL

04:30.960 --> 04:33.870
and it should redirect to HTTPS.

04:33.870 --> 04:35.790
You can see here connection is secure

04:35.790 --> 04:37.980
and certificate is valid.

04:37.980 --> 04:42.510
Same applies for the app three, which is root context.

04:42.510 --> 04:44.790
We have accessed HTTP URL

04:44.790 --> 04:48.090
and it redirected successfully HTTPS.

04:48.090 --> 04:50.586
And you can see connection is secure

04:50.586 --> 04:52.110
and certificate is valid.

04:52.110 --> 04:56.206
So this completes the SSL redirect related demo.

04:56.206 --> 04:59.433
So we'll go ahead and then clean up these things.

05:00.309 --> 05:01.142
So I'll go back here

05:01.142 --> 05:05.190
and say kubectl delete -F kube manifest.

05:05.190 --> 05:07.287
And once this is deleted,

05:07.287 --> 05:08.640
we are also going to crosscheck

05:08.640 --> 05:12.330
whether our load balancer is successfully destroyed or not.

05:12.330 --> 05:16.560
So all the deployments and notebook services were deleted

05:16.560 --> 05:19.440
and ingress related service also deleted.

05:19.440 --> 05:22.590
So let's refresh here and it is gone.

05:22.590 --> 05:24.209
This is good.

05:24.209 --> 05:27.660
So now also go to the Route 53 related service

05:27.660 --> 05:31.830
and go to the SSL day hosted zone

05:31.830 --> 05:33.840
and go to stacksimplify.com.

05:33.840 --> 05:36.690
In your case, it'll be yourdomain.com

05:36.690 --> 05:41.427
and remove the SSL demo one related DNS record

05:43.110 --> 05:46.187
whatever we have created, right?

05:46.187 --> 05:50.580
So I'll delete the record SSLdemo101.stacksimplify.com

05:50.580 --> 05:54.180
right? So this completes the cleanup part.

05:54.180 --> 05:56.190
In our next section

05:56.190 --> 05:59.580
we are going to focus on very, very important topic

05:59.580 --> 06:04.386
which is external DNS fo Kubernetes on AWS cloud.

06:04.386 --> 06:06.390
So I'll see you in the next section.

06:06.390 --> 06:07.650
Until then, bye bye.

06:07.650 --> 06:08.483
Thank you.
