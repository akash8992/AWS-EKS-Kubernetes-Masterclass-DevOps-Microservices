WEBVTT

00:00.120 --> 00:00.953
-: Welcome back.

00:00.953 --> 00:04.011
In this lecture we are going to create a VPA manifest

00:04.011 --> 00:08.220
required for our application, whatever we have deployed.

00:08.220 --> 00:11.760
So vertical port autoscaler related manifest

00:11.760 --> 00:13.680
we are creating now.

00:13.680 --> 00:17.100
So if you see here, so it's APA version is auto scaling

00:17.100 --> 00:22.100
ks i v one beta and the kind is vertical port autoscaler

00:23.457 --> 00:26.790
and ized cube engineer vpa whatever we want to

00:26.790 --> 00:28.350
put it in spec.

00:28.350 --> 00:30.570
We have a few things, two important things

00:30.570 --> 00:34.170
target reference and then resource policy.

00:34.170 --> 00:37.080
So target references to which deployment you

00:37.080 --> 00:38.220
are going to point to.

00:38.220 --> 00:40.440
So my deployment is means

00:40.440 --> 00:42.540
like to which application you are going to point

00:42.540 --> 00:45.240
to and of what kind, whether it is a deployment

00:45.240 --> 00:47.250
or state full set or whatever it is, right?

00:47.250 --> 00:49.500
So mine is a API version.

00:49.500 --> 00:51.660
Apps we one and its kind is deployment

00:51.660 --> 00:54.080
and its name is VPA demo deployment.

00:54.080 --> 00:57.689
So that information we have provided in target reference

00:57.689 --> 01:01.620
and we also have resource policy where the policy related

01:01.620 --> 01:04.200
to respect to container we need to define.

01:04.200 --> 01:06.480
So in our part, if we have multiple containers

01:06.480 --> 01:09.210
also per container how much it need to be defined.

01:09.210 --> 01:10.950
Also you can provide the container name

01:10.950 --> 01:13.500
and then provide the information.

01:13.500 --> 01:16.140
So controlled resources we are doing is CPU

01:16.140 --> 01:18.650
and then memory by vpa, vertical port

01:18.650 --> 01:22.440
at scaler and minimum alert is whatever we have put

01:22.440 --> 01:24.826
in our request section.

01:24.826 --> 01:26.716
Okay? So in request section, okay

01:26.716 --> 01:29.280
and max load how much it is allowed

01:29.280 --> 01:32.910
for my respective deployment for this respective container

01:32.910 --> 01:35.499
how much it is load is one CPU

01:35.499 --> 01:39.240
and then memory is 500 mi it is allowed.

01:39.240 --> 01:43.050
So that is the max limit it can use and but it can use

01:43.050 --> 01:45.960
this is the max limit but it can use anything

01:45.960 --> 01:50.880
between five M two one cpu, 0.00521 cpu

01:50.880 --> 01:55.110
how much it want it can use and even memory also

01:55.110 --> 01:59.100
from five MI two 500 mi, it can use how much it want.

01:59.100 --> 02:00.469
It can use that much.

02:00.469 --> 02:05.250
So based on the load, whatever it is coming, it is going

02:05.250 --> 02:09.908
to auto configure our respective parts resources there

02:09.908 --> 02:11.370
and then let us know.

02:11.370 --> 02:13.945
So if we describe the part after generating some load

02:13.945 --> 02:16.647
we'll know that how much it is going to be.

02:16.647 --> 02:19.920
So that's about the VPA manifest.

02:19.920 --> 02:22.050
Okay, so we can even see the same manifest here.

02:22.050 --> 02:24.875
Z zero two VPA manifest.

02:24.875 --> 02:26.610
Okay, so let's go ahead

02:26.610 --> 02:31.610
and then deploy our VPA manifest Q CTL apply hyphen F

02:31.805 --> 02:33.627
and cube manifest.

02:33.627 --> 02:38.176
And inside that we have zero two VPA manifest dot yml.

02:38.176 --> 02:42.990
So let's deploy this and then we can say cube ctl

02:42.990 --> 02:45.750
get VPA to see our list of our VPs.

02:45.750 --> 02:49.410
So we have one VPA Q CTL describe VPA

02:49.410 --> 02:53.580
and cube engineer is the name of the cube engines VPs.

02:53.580 --> 02:57.578
So let's make paste it here and we can see that.

02:57.578 --> 02:59.654
So for container names star

02:59.654 --> 03:03.716
okay Max Lotes CPU one and then memory is 500 I.

03:03.716 --> 03:06.360
So that's about the information, the policy

03:06.360 --> 03:09.450
of vertical port scaler for our respective deployment.

03:09.450 --> 03:13.200
Whatever we have defined, we can see it here.

03:13.200 --> 03:17.097
Okay, so the next thing here is we'll go here

03:17.097 --> 03:19.770
and then we'll generate some load

03:19.770 --> 03:21.330
and then test what happens.

03:21.330 --> 03:25.530
Okay, so on terminal one we are going to put clear

03:25.530 --> 03:27.870
and I'm going to say cube CT get parts

03:27.870 --> 03:30.330
and then keep watching the ports.

03:30.330 --> 03:32.310
So I have four ports here which are running

03:32.310 --> 03:33.630
from six minutes.

03:33.630 --> 03:36.417
Okay, so now I'm going to take a new terminal

03:36.417 --> 03:39.880
and then paste the command, which is

03:41.550 --> 03:43.890
It should not be, Hello?

03:43.890 --> 03:45.870
It should be just til here.

03:45.870 --> 03:48.930
Okay, so let me fix this off as it is cube engine image.

03:48.930 --> 03:51.510
So on the root context itself, we have the index

03:51.510 --> 03:55.140
do TML reality didn't apply any hello vault service here.

03:55.140 --> 03:58.170
So it is just a slash okay, so I'm going to run this

03:58.170 --> 04:00.660
on three terminals continuously.

04:00.660 --> 04:05.310
Okay, so let me go here and then paste it and run it.

04:05.310 --> 04:08.160
Okay, so in one more also I'm going to run it and

04:08.160 --> 04:10.260
in one more also I'm going to run it.

04:10.260 --> 04:12.960
Okay, so and then let me see how it goes.

04:12.960 --> 04:15.390
Okay, so what happened?

04:24.192 --> 04:25.800
So let me take one more time.

04:25.800 --> 04:28.740
So we are going to copy one by one and then why?

04:28.740 --> 04:30.510
Because the names are going to be different.

04:30.510 --> 04:32.760
Apache bench one, Apache bench two and then

04:32.760 --> 04:34.050
Apache bench three.

04:34.050 --> 04:37.860
So let me copy bench one here and then run it.

04:37.860 --> 04:39.462
And this is bench two.

04:39.462 --> 04:43.920
Okay, already exists.

04:43.920 --> 04:47.133
So here it is running, no, what happened?

04:49.505 --> 04:54.505
So let me close, close right so we can run it

04:58.950 --> 05:02.820
Right? So anywhere one load is also sufficient for us.

05:02.820 --> 05:04.320
We can see it here.

05:04.320 --> 05:08.490
So continuously it is changing

05:08.490 --> 05:10.740
it is terminating and then recreating the pods.

05:10.740 --> 05:13.140
Okay? So if you want you can go here

05:13.140 --> 05:17.850
and then get pods and then take a newly created pod.

05:17.850 --> 05:20.190
Okay? So which is 68 seconds before

05:20.190 --> 05:22.570
okay cube C here describe pod

05:22.570 --> 05:27.570
and then verify this 68 seconds latest created pod copy

05:27.949 --> 05:30.380
and then past it, right?

05:30.380 --> 05:35.380
And then if you see here it is taking 25 M and then 26, 2 4

05:36.142 --> 05:40.230
this is this much CPU and then memory it is requesting.

05:40.230 --> 05:42.060
But ideally how much we have allocated

05:42.060 --> 05:44.430
we have allocated only this much.

05:44.430 --> 05:48.540
If you see here in our re respect tool deployment manifest.

05:48.540 --> 05:50.390
Okay, so that's about it.

05:50.390 --> 05:55.390
So it is taking automatically and then allocating it based

05:55.440 --> 05:57.222
on the load, how much we are getting.

05:57.222 --> 06:00.540
So if you want we can even say get port watch

06:00.540 --> 06:03.150
and then some more ports will be terminating

06:03.150 --> 06:06.210
and then recreating it based on the need, how much we need.

06:06.210 --> 06:09.720
Okay, so all these port already terminated and then

06:09.720 --> 06:12.843
recreated. Okay, so that's about it.

06:14.070 --> 06:17.040
So cube CTL get ports one more time

06:17.040 --> 06:18.090
if you want we can check.

06:18.090 --> 06:20.850
Okay, so this, these are running from three minutes

06:20.850 --> 06:23.430
we can even see those information

06:23.430 --> 06:26.730
how much it is taking, okay, so that you get a clarity

06:26.730 --> 06:31.113
on what happened, copy and then past it.

06:32.580 --> 06:36.480
So for this it is 25 M and then 2 6 2 1 4 4 K.

06:36.480 --> 06:39.111
So from whatever we have requested

06:39.111 --> 06:43.170
vertical port autoscaler automatically increased the CPU

06:43.170 --> 06:45.558
and then memory of our four ports.

06:45.558 --> 06:50.430
So which means al port where we have increased the number

06:50.430 --> 06:53.429
of ports for our application from 1 2 10

06:53.429 --> 06:57.849
but when we come to vpa, vertical port data scaler

06:57.849 --> 07:02.220
so all four parts are going to be as is four parts

07:02.220 --> 07:07.220
but they CPU and then memory got increased based

07:07.260 --> 07:11.130
on the load, whatever we are getting right?

07:11.130 --> 07:13.140
So that's about it if you want to run more

07:13.140 --> 07:15.840
and more load so you can keep running these things

07:15.840 --> 07:17.190
in different different terminals.

07:17.190 --> 07:21.360
Okay, so in one terminal with Apache bench as your pardon

07:21.360 --> 07:22.980
you are going to run in another terminal

07:22.980 --> 07:25.290
you're going to run it as Apache bench two

07:25.290 --> 07:27.240
and then in another terminal you're going to run it

07:27.240 --> 07:30.679
as Apache bench three part names I am saying okay

07:30.679 --> 07:32.730
so that it'll get more and more load

07:32.730 --> 07:34.290
and then you'll get more clarity

07:34.290 --> 07:38.010
on how much it is going to increase based on the load.

07:38.010 --> 07:40.730
But as far as we have seen how VPA work

07:40.730 --> 07:42.400
we already got the clarity.

07:42.400 --> 07:44.520
So now a few important notes

07:44.520 --> 07:48.660
about VPA is VPA updater can relaunch Newport

07:48.660 --> 07:50.580
with updated CPU n memory when you

07:50.580 --> 07:52.980
at least have two parts in deployment.

07:52.980 --> 07:54.510
So this is very important.

07:54.510 --> 07:57.868
So we have four parts, that's the reason two parts at a time

07:57.868 --> 08:01.770
for if you see here that is the important catch point here

08:01.770 --> 08:05.520
okay, so for these two parts it is four minutes, 54 seconds

08:05.520 --> 08:08.250
as they launch time right from, it's like it, it took

08:08.250 --> 08:11.668
from last four minutes they are running and these two parts

08:11.668 --> 08:14.211
it is running from three minutes 54 seconds.

08:14.211 --> 08:17.250
So what it does is, so out of four parts

08:17.250 --> 08:20.640
first it took two parts and then modified its CPU

08:20.640 --> 08:23.910
n memory and then relaunched it and then it waited

08:23.910 --> 08:26.400
for one more minute and then launch it again.

08:26.400 --> 08:29.959
Two more parts with with the, again the CPU N memory.

08:29.959 --> 08:34.170
So it didn't make any of the entire services down

08:34.170 --> 08:38.109
it ensured that it has done in a rolling update fashion.

08:38.109 --> 08:42.180
So, but when, what happens if it is only one pod you have.

08:42.180 --> 08:44.340
So that also we need to understand right

08:44.340 --> 08:46.092
if we have only one pod running

08:46.092 --> 08:49.290
unless we manually delete that part, it will not

08:49.290 --> 08:52.020
launch a new quad with the VPA recommended CPU

08:52.020 --> 08:55.890
N memory considering the application availability scenario.

08:55.890 --> 08:57.210
So it is very intelligent

08:57.210 --> 09:00.000
and then understands that there is only one part

09:00.000 --> 09:01.830
and then if you term, if I terminate

09:01.830 --> 09:04.962
and then recreate it due topa recommendations

09:04.962 --> 09:08.070
there will be downtime for the application I I

09:08.070 --> 09:10.620
should not be the cause for that downtime.

09:10.620 --> 09:12.540
So it'll feel that way and then it'll ensure

09:12.540 --> 09:14.340
that that part it is not going to delete

09:14.340 --> 09:17.130
if it is only one part in your deployment.

09:17.130 --> 09:20.580
So if we terminate it manually go and then terminate it

09:20.580 --> 09:21.810
then it is going to relaunch

09:21.810 --> 09:26.730
with new VPA recommended CPU and then memory resources.

09:26.730 --> 09:27.563
So that's

09:27.563 --> 09:30.900
about the very important point we need to know about vpa.

09:30.900 --> 09:33.722
So let's go ahead and then delete whatever we have created

09:33.722 --> 09:35.520
as part of this section.

09:35.520 --> 09:38.874
Okay, so I'll go here and then clear the stuff.

09:38.874 --> 09:42.456
And Q ctl, delete H and F Q manifest.

09:42.456 --> 09:45.030
So whatever the VP we have created

09:45.030 --> 09:48.645
and then deployment and then service, it got deleted.

09:48.645 --> 09:52.470
So this completes the vertical port Autoscaler demo.

09:52.470 --> 09:53.398
And then understanding

09:53.398 --> 09:56.130
in our next lecture we are going to focus

09:56.130 --> 10:00.202
on cluster autoscaler four elastic service eks.

10:00.202 --> 10:02.190
So I'll see you in the next lecture.

10:02.190 --> 10:03.210
Until then, bye bye.

10:03.210 --> 10:04.043
Thank you.
