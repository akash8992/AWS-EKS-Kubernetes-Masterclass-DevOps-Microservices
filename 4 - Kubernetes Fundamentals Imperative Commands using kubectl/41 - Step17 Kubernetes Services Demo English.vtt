WEBVTT

00:00.000 --> 00:00.870
-: Welcome back.

00:00.870 --> 00:02.880
In this lecture we are going to do the

00:02.880 --> 00:04.860
Kubernetes services demo.

00:04.860 --> 00:08.373
So let's see what we are going to implement as part of that.

00:09.330 --> 00:11.220
So in a Kubernetes cluster

00:11.220 --> 00:14.400
we are going to do a backend deployment.

00:14.400 --> 00:17.070
So we have a simple springboot REST services

00:17.070 --> 00:18.960
hello world service.

00:18.960 --> 00:20.520
So we are going to deploy it.

00:20.520 --> 00:22.890
As soon as we create the deployment,

00:22.890 --> 00:24.990
automatically it's equivalent replica set

00:24.990 --> 00:27.150
and then pod gets created.

00:27.150 --> 00:28.350
So once that is done

00:28.350 --> 00:29.910
we are going to create

00:29.910 --> 00:33.990
the backend app related cluster IP services

00:33.990 --> 00:36.480
using kubectl expose.

00:36.480 --> 00:37.830
So once we do that,

00:37.830 --> 00:42.090
so we'll go ahead and then create the frontend deployment.

00:42.090 --> 00:46.140
So in frontend we are going to create a Nginx pod

00:46.140 --> 00:47.700
and in that Nginx pod

00:47.700 --> 00:50.220
we'll have a proxy to this respective

00:50.220 --> 00:52.170
cluster IP service of backend

00:52.170 --> 00:55.020
which is nothing but my backend service.

00:55.020 --> 00:58.140
Now for the users to access our application

00:58.140 --> 01:02.070
we'll also deploy the frontend app NodePort service

01:02.070 --> 01:04.833
so that users will be able to access it.

01:05.940 --> 01:08.580
So let's go to our GitHub repo

01:08.580 --> 01:13.580
and we'll go to our 05 services with kubectl, right?

01:13.620 --> 01:15.030
So introductory section

01:15.030 --> 01:17.310
we already discussed in our previous lecture.

01:17.310 --> 01:19.110
So let's go onto our step two

01:19.110 --> 01:22.680
which is cluster IP service backend application setup.

01:22.680 --> 01:25.320
So let's deploy a simple backend application

01:25.320 --> 01:27.930
and then front it with a cluster IP.

01:27.930 --> 01:29.730
So the application we are going to use is

01:29.730 --> 01:31.830
a simple springboot REST application.

01:31.830 --> 01:34.200
Just a hello world, REST application.

01:34.200 --> 01:37.260
So what we need to do, if you want to deploy a application

01:37.260 --> 01:39.720
we just need to create a deployment

01:39.720 --> 01:42.030
and then front it with a service.

01:42.030 --> 01:44.730
So, kubectl create deployment,

01:44.730 --> 01:48.540
my backend REST app and the image of that, right?

01:48.540 --> 01:53.540
So let me copy this, go to my terminal and then paste it.

01:55.170 --> 01:59.610
So it should create our respective application, right?

01:59.610 --> 02:03.180
So we can say pods, to see our pod is running.

02:03.180 --> 02:05.040
Yes. And if you want

02:05.040 --> 02:09.390
you can even say, logs -f, okay, kubectl logs -f,

02:09.390 --> 02:13.890
and then check the logs of our springboot application.

02:13.890 --> 02:15.810
It should be up running now.

02:15.810 --> 02:18.960
Started your hello world application in three seconds

02:18.960 --> 02:21.195
on port 8080.

02:21.195 --> 02:26.195
Okay, So if you see here also we have exposed

02:26.280 --> 02:28.350
means like we are going to expose as a service

02:28.350 --> 02:31.200
with the port 8080, right?

02:31.200 --> 02:33.390
And the target port is also 8080.

02:33.390 --> 02:36.120
So we really don't need to mention target port 8080

02:36.120 --> 02:38.700
but for our convenience means like

02:38.700 --> 02:40.710
following a standard, so I just put it.

02:40.710 --> 02:42.060
In addition to that

02:42.060 --> 02:44.610
you really don't need to provide when you are doing,

02:44.610 --> 02:46.980
when you're creating a service using kubectl

02:46.980 --> 02:49.380
imperative command expose, right?

02:49.380 --> 02:50.820
So you really don't need to provide

02:50.820 --> 02:52.740
type is equal to cluster IP here.

02:52.740 --> 02:56.610
Reason is cluster IP services by default created by

02:56.610 --> 02:58.620
means like its a default service, okay?

02:58.620 --> 03:01.200
So we really don't need to specify that

03:01.200 --> 03:02.907
if it is a type is equal to NodePort,

03:02.907 --> 03:04.170
yes we need to specify,

03:04.170 --> 03:07.230
but for cluster IP, we really don't need to specify it.

03:07.230 --> 03:11.370
So kubectl, expose deployment, my backend REST app,

03:11.370 --> 03:16.290
port, target port, and my service name, my backend service,

03:16.290 --> 03:20.513
the service name is my backend service. Okay?

03:23.070 --> 03:27.390
So now everything is created, kubectl get svc.

03:27.390 --> 03:29.790
So my backend stuff is completed now.

03:29.790 --> 03:33.960
So now I need to create a frontend Nginx reverse proxy

03:33.960 --> 03:36.840
and then that Nginx proxy should proxy to this

03:36.840 --> 03:38.700
my backend service.

03:38.700 --> 03:41.100
So for that purpose I prebuilt the container

03:41.100 --> 03:42.540
and then put it here.

03:42.540 --> 03:44.640
So if you go to our NodePort service

03:44.640 --> 03:46.200
so in my Nginx conf,

03:46.200 --> 03:47.610
I have put in the proxy pass,

03:47.610 --> 03:50.910
my backend service:8080 as the port,

03:50.910 --> 03:52.020
whatever we are seeing, right?

03:52.020 --> 03:55.860
My backend service and then port is 8080, right?

03:55.860 --> 03:57.930
So if it is not in default namespace

03:57.930 --> 04:00.180
and then some other namespaces or something

04:00.180 --> 04:03.390
again we need to give the full cluster DNS name

04:03.390 --> 04:06.600
which is svc.default.svc.local,

04:06.600 --> 04:07.740
all those stuff we need to give.

04:07.740 --> 04:11.020
But as we are running in that default namespace only, okay?

04:11.020 --> 04:14.220
kubectl get ns, right?

04:14.220 --> 04:15.870
We'll list the namespaces.

04:15.870 --> 04:18.240
This is a different concept, which we look into it later

04:18.240 --> 04:20.280
but currently we are in the default namespace.

04:20.280 --> 04:21.960
We really don't need to provide

04:21.960 --> 04:25.140
any full cluster DNS host name here.

04:25.140 --> 04:28.350
So that's the reason to make it very simple for you

04:28.350 --> 04:30.510
and not to confuse too much.

04:30.510 --> 04:33.640
So I just gave whatever is my cluster IP service name here

04:34.830 --> 04:37.020
the same thing I have provided, right?

04:37.020 --> 04:39.810
And then I have pre-built the image and then put it ready.

04:39.810 --> 04:40.920
So in our docker hub,

04:40.920 --> 04:43.770
so we can directly use it and then run these commands

04:43.770 --> 04:46.050
and then everything should work for you. Okay?

04:46.050 --> 04:47.850
So and no, no, no

04:47.850 --> 04:52.230
I want to create my own reverse proxy related docker image.

04:52.230 --> 04:53.610
Okay? Yes, you can do it.

04:53.610 --> 04:57.000
So I have provided the steps and the source here

04:57.000 --> 04:58.350
kube frontend Nginx.

04:58.350 --> 05:00.960
If you click on that, so you'll, it'll take you to

05:00.960 --> 05:05.550
00 docker images, 03 kube frontend Nginx. Okay?

05:05.550 --> 05:08.940
So prerequisite is you should have your docker account

05:08.940 --> 05:11.490
and then you can create your docker file like this.

05:11.490 --> 05:14.910
Everything is present in this v1 release, the docker file

05:14.910 --> 05:16.020
and which is nothing but

05:16.020 --> 05:19.470
from Nginx you're taking your source image as Nginx

05:19.470 --> 05:21.270
and you're copying the default.conf,

05:21.270 --> 05:22.800
whatever is there in the current directory

05:22.800 --> 05:25.590
to etc Nginx.conf.d right?

05:25.590 --> 05:27.420
So if you're seeing one release

05:27.420 --> 05:29.370
you'll see that default.conf also here

05:29.370 --> 05:31.830
inside that you can see proxy pass

05:31.830 --> 05:34.710
backend cluster IP service name and then port.

05:34.710 --> 05:37.050
That's what you have put it here, okay?

05:37.050 --> 05:39.360
So the same thing and you can go here

05:39.360 --> 05:44.070
and then review these things and then after that you can

05:44.070 --> 05:47.040
you can go into this v1 release folder, right?

05:47.040 --> 05:50.400
Cd2 v1 release and from there you can build a

05:50.400 --> 05:53.640
docker build -d and your docker hub id

05:53.640 --> 05:57.240
and the kube frontend Nginx column 1.0.0

05:57.240 --> 05:59.970
and take the files from the current directory dot okay?

05:59.970 --> 06:02.040
And then push that to your dock hub id

06:02.040 --> 06:05.220
and then you can start using it if you want. Okay?

06:05.220 --> 06:07.890
So but for for me, like you can leverage this

06:07.890 --> 06:10.740
this current whatever the docker image

06:10.740 --> 06:12.000
and then you can continue,

06:12.000 --> 06:12.840
but it's up to you.

06:12.840 --> 06:15.360
Just I have given why? Because it is Nginx, right?

06:15.360 --> 06:17.310
So I didn't give any steps for

06:17.310 --> 06:20.100
related to springboot related application.

06:20.100 --> 06:22.170
Why? Because again, it might confuse you

06:22.170 --> 06:23.610
and then create complex stuff.

06:23.610 --> 06:27.180
But here for Nginx it's a simple thing, right?

06:27.180 --> 06:30.060
So you can try out your docker skills there

06:30.060 --> 06:30.900
with those steps

06:30.900 --> 06:32.910
and then come back and then leverage that here

06:32.910 --> 06:34.500
so that you'll be more confident.

06:34.500 --> 06:35.550
So for that purpose

06:35.550 --> 06:39.990
I gave the detailed steps for kube frontend Nginx building.

06:39.990 --> 06:43.140
Okay? So now lot of things we discuss it.

06:43.140 --> 06:46.740
So let's go ahead and then create the frontend deployment

06:46.740 --> 06:51.120
and then create the frontend expose that as a service, okay?

06:51.120 --> 06:52.800
kubectl create deployment

06:52.800 --> 06:56.610
my frontend Nginx app is my deployment name

06:56.610 --> 07:00.450
and the image is kube -frontend Nginx. Okay?

07:00.450 --> 07:05.450
So let's take this and we are here, okay?

07:08.520 --> 07:10.020
Created, right?

07:10.020 --> 07:13.606
And now let's go ahead and then expose it, right?

07:13.606 --> 07:16.273
(keys clanging)

07:21.210 --> 07:23.850
So clear, kubectl get pods,

07:23.850 --> 07:27.840
both pods should be running now and get svc.

07:27.840 --> 07:30.600
We should have two services related to backend service

07:30.600 --> 07:32.678
and then frontend service with NodePort

07:32.678 --> 07:34.350
and then NodePort ID.

07:34.350 --> 07:36.360
So if you want to access your application

07:36.360 --> 07:41.360
so you can say get nodes and -o wide, right?

07:41.970 --> 07:44.820
And take the public IP here

07:44.820 --> 07:48.960
and 32209 is our port.

07:48.960 --> 07:50.790
So let's go to the browser

07:50.790 --> 07:54.273
and say, okay,

07:55.860 --> 08:00.420
and /hello, right?
(keys clanging)

08:00.420 --> 08:05.420
Sorry. So the IP:32209 is my port

08:05.850 --> 08:09.720
and then /hello is the context, right?

08:09.720 --> 08:14.720
So, so we got the response, so let me make it bigger.

08:15.120 --> 08:20.120
And if you see it here, 32209 is our node pod port

08:21.450 --> 08:22.830
and then /hello.

08:22.830 --> 08:23.670
So that is the thing.

08:23.670 --> 08:26.410
So the same thing, we have done it 32209

08:27.630 --> 08:30.060
and the context is /hello. Good.

08:30.060 --> 08:32.190
So now what we are going to do is

08:32.190 --> 08:34.980
so we are going to scale our backend applications

08:34.980 --> 08:37.500
so that how the load balancing happens.

08:37.500 --> 08:40.560
And then you can even see different values here.

08:40.560 --> 08:42.330
Where is this?

08:42.330 --> 08:43.230
Here, right?

08:43.230 --> 08:45.510
So this container id, right?

08:45.510 --> 08:47.310
So this is going to change continuously.

08:47.310 --> 08:49.200
So whenever you refresh the browser

08:49.200 --> 08:50.670
so let's test that

08:50.670 --> 08:52.980
for our convenience, okay?

08:52.980 --> 08:57.030
So, kubectl scale --replicas is equal to 10

08:57.030 --> 08:58.740
and my backend application, okay?

08:58.740 --> 09:01.143
So I'm scaling my backend application.

09:02.340 --> 09:05.430
So let's go here and then scale it.

09:05.430 --> 09:09.060
So now, kubectl get pods, my backend should be

09:09.060 --> 09:11.910
10 backends, I should have, right?

09:11.910 --> 09:13.470
So it's coming up.

09:13.470 --> 09:16.200
So let's, okay, so all are up and running.

09:16.200 --> 09:20.280
So now let's go ahead and then test that now, okay?

09:20.280 --> 09:22.140
So where is this?

09:22.140 --> 09:23.850
Here, right?

09:23.850 --> 09:28.443
So I'll keep saying refresh, right? Right.

09:31.740 --> 09:36.300
Okay, so we can refresh it, something, okay.

09:36.300 --> 09:38.703
See, you can see this is changing continuously,

09:39.606 --> 09:42.273
(keys clanging)

09:44.610 --> 09:46.890
H60MV now.
(keys clanging)

09:46.890 --> 09:50.837
So it's load balancing across all the backends, right?

09:50.837 --> 09:54.840
9gvfm, wnzz.

09:54.840 --> 09:57.600
So like this, you are seeing all the containers are up now

09:57.600 --> 10:00.600
and then healthy, we are not even seeing that error. Okay?

10:00.600 --> 10:03.900
So, vfmwg, okay?

10:03.900 --> 10:05.940
So you can see how it is going on.

10:05.940 --> 10:07.470
So that, that's about it.

10:07.470 --> 10:12.470
So we have completed our services demo successfully

10:12.630 --> 10:14.010
and one thing here is

10:14.010 --> 10:15.870
we really didn't look into load balancer

10:15.870 --> 10:18.000
and then external concepts here.

10:18.000 --> 10:19.800
So these things we will look into

10:19.800 --> 10:22.170
as part of our series of courses

10:22.170 --> 10:26.640
whatever we are doing for AWS, Azure and then Google Cloud.

10:26.640 --> 10:30.330
So in those things we will extensively look into this stuff.

10:30.330 --> 10:31.920
So I'll see you in the next lecture.

10:31.920 --> 10:33.693
Until then, bye bye. Thank you.
